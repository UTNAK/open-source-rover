---
format:
  html:
    self-contained: true
---

# Create Mass Property Description

# quarto::quarto_render("chapters/04_massrollup/create_descriptions_mass.qmd", output_format = "html")

```{r}
#| warning: false

library(igraph)

searchDirectory <- function(iteration, pattern, parent_directory){
  for(i in 1:iteration){
      path <- list.files(parent_directory, recursive = TRUE, pattern = pattern, full.names = TRUE)
      if(length(path)){
        return(path)
      }
      parent_directory <- dirname(parent_directory)
  }
  print("file not found")
  return(path)
}

source(searchDirectory(4, "osr_common.R", (getwd())))
source(searchDirectory(4, "massRollup.R", (getwd())))
```



## Analysis: Finding Edges of the Containment Graph from Oml Model

### Build and Start Fuseki server for oml model query
```{r}
#| warning: false

library(omlhashiR)
# oml_repository <- "../open-source-rover/"
oml_repository <- omlrepo
omlhashiR::oml_refresh()
omlhashiR::oml_stop_Daemon(oml_repository)
omlhashiR::oml_build(oml_repository)
```


```{r}
omlhashiR::oml_startFuseki(oml_repository)
omlhashiR::oml_owlLoad(oml_repository)
```
### Analysis: Query Containment Graph and Current Mass Property

```{r}
library(tansakusuR)

endpoint_url <- "http://localhost:3030/open-source-rover/sparql"

repo <- paste0(omlrepo, "src/vision/sparql/")


file <- "component_filtered_withmass.sparql"
filepath <- paste0(repo,file)

show_query(filepath)
df <- send_query_from_file(endpoint_url, filepath)
datatable(df, options = list(pageLength = -1))
```

### Analysis: Create Containment Graph

```{r}
root <- "OSR"
g <- graph_from_data_frame(df[,c("c2_localname","c1_localname")], 
                           directed = TRUE, 
                           vertices = NULL)

# remove NA from node
g <- delete_vertices(g, V(g)["NA"])

```

### Analysis: Read Current Mass Property Data in Model

```{r}
order <- dfs(g, V(g)[root], order.out = TRUE)$order

df_mass <- df %>%
  mutate(c1_mass = replace_na(as.numeric(df$c1_mass),0)) %>% 
  arrange(factor(c1_localname, levels = names(order))) %>%
  select("c1_localname", "c1_id", "c1_name", "c1_type", "c1_mass")

df_mass
```

## Update Mass Properties using Json

This process includes user interface of the VS-Code Extension.

![json editor](../../img/jsoneditor.png)

## Read Mass Properties from data

```{r}
#path = "./data_massproperty.json"
#path = "./quarto_docs/chapters/04_massrollup/data_massproperty.json"
path <- searchDirectory(4, "data_massproperty.json", dirname(getwd()))

df_json <- read_json(path = path,  simplifyVector = TRUE)
```


## Analysis: Mass Rollup By Depth-First Traversal

```{r}
df_mass_update <- massRollUp(g, root, df_json)
df_mass_compare <- left_join(df_mass_update, df_mass, by = c("c1_localname","c1_id","c1_name","c1_type"), suffix = c("", "_before"))
df_mass_compare
```



## Generate OML Descriptions


### Create Instance
```{r}
df_instance <- data.frame(
  name = df_mass_update$c1_localname,
  instancename = paste0(df_mass_update$c1_localname,".mass.magnitude"),
  mass = df_mass_update$c1_mass,
  type = str_replace_all(df_mass_update$c1_type, c("System"="subsystems", "Subsystem"="subsystems", "Assembly"="assembly"))
  ) 
```


### Generate OML Mass Descriptions

```{r}
outputdir <- paste0(omlrepo,"src/oml/opencaesar.io/open-source-rover/description/mass/")
outputfile <- paste0(outputdir, "masses.oml")
omldescriptions <- generateOmlMassDescriptions(df_instance)
```


### Generate OML File
```{r}
cat(file=outputfile, omldescriptions)
```



## Update Json
```{r}
write_json(df_mass_update, path = path, pretty=TRUE)
```



```{r}
df2<- df %>%
  mutate(c2_mass = df$c1_mass[match(unlist(df$c2_localname), df$c1_localname)]) %>%
  mutate(owner=paste0(c2_localname," (", c2_mass," kg)")) %>%
  mutate(name=paste0(c1_localname," (", c1_mass," kg)")) %>%
  select("owner","name","c1_type")

# Set NA node for CollapsibleTree
df2$owner[df2$owner=="NA (NA kg)"] <- NA


plotCollapsibleTreeFromDataframe(df2, palette="BluYl", parent="owner", child="name",type="c1_type")
```


### Some visualization experiments

#### networkD3::simpleNetwork
```{r}
df2<- df %>% 
  mutate(owner=c2_localname) %>%
  mutate(name=c1_localname) %>%
  select("owner","name") %>%
  arrange(desc(owner)) %>%  
  slice(-n())


library(networkD3)

networkD3::simpleNetwork(df2)
```

