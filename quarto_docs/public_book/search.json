[
  {
    "objectID": "chapters/02_interface/assembly_interface.html#summary",
    "href": "chapters/02_interface/assembly_interface.html#summary",
    "title": "7  Assembly Interface",
    "section": "7.1 Summary",
    "text": "7.1 Summary\nThis is a demonstration of vocabulary concept for the interface."
  },
  {
    "objectID": "chapters/02_interface/assembly_interface.html#methodology",
    "href": "chapters/02_interface/assembly_interface.html#methodology",
    "title": "7  Assembly Interface",
    "section": "7.2 Methodology",
    "text": "7.2 Methodology"
  },
  {
    "objectID": "chapters/02_interface/assembly_interface.html#business-questions",
    "href": "chapters/02_interface/assembly_interface.html#business-questions",
    "title": "7  Assembly Interface",
    "section": "7.3 Business Questions",
    "text": "7.3 Business Questions"
  },
  {
    "objectID": "chapters/02_interface/assembly_interface.html#vocabulary",
    "href": "chapters/02_interface/assembly_interface.html#vocabulary",
    "title": "7  Assembly Interface",
    "section": "7.4 Vocabulary",
    "text": "7.4 Vocabulary\n\nmission:Interface\nmission:Presents\nmission:Junction\n\n\n\n\nVocabulary"
  },
  {
    "objectID": "chapters/02_interface/assembly_interface.html#descriptions",
    "href": "chapters/02_interface/assembly_interface.html#descriptions",
    "title": "7  Assembly Interface",
    "section": "7.5 Descriptions",
    "text": "7.5 Descriptions\nPattern from kepler-16b\n\n[Component C1] [C1.presents.if01] [C1.if01]\n[Component C2] [C2.presents.if01] [C2.if01]\n[C1.C2.J1] [mission:Join1] [C1.if01]\n[C1.C2.J1] [mission:Join2] [C2.if01]\n\n    instance orbiter-spacecraft.telemetryOut : mission:Interface [\n        base:hasIdentifier \"I.02\"\n        base:hasCanonicalName \"Telemetry Out\"\n    ]\n    relation instance orbiter-spacecraft.presents.telemetryOut : mission:Presents [\n        from components:orbiter-spacecraft\n        to orbiter-spacecraft.telemetryOut\n    ]\n\n    instance orbiter-ground-data-system.telemetryIn : mission:Interface [\n        base:hasIdentifier \"I.04\"\n        base:hasCanonicalName \"Telemetry In\"\n    ]\n    relation instance orbiter-ground-data-system.presents.telemetryIn : mission:Presents [\n        from components:orbiter-ground-data-system\n        to orbiter-ground-data-system.telemetryIn\n    ]\n    \n    relation instance orbiter-ground-data-system.orbiter-spacecraft.telemetry.downlink : mission:Junction [\n        from interfaces:orbiter-spacecraft.telemetryOut\n        to interfaces:orbiter-ground-data-system.telemetryIn\n        base:hasIdentifier \"J.02\"\n        base:hasCanonicalName \"Orbiter Telemetry Downlink\"\n    ]\n    \n\n7.5.1 Automate Description Process\n\nsource(\"../../osr_common.R\")\n\n\n\n7.5.2 Import from github\n Get information of interfaces from CAD Model\n\n\n7.5.3 Get Assembly Descriptions from model\n\nlibrary(omlhashiR)\n# oml_repository &lt;- \"../open-source-rover/\"\noml_repository &lt;- omlrepo\nomlhashiR::oml_refresh()\n\n[1] \"kill success for pid=26186\"\n\nomlhashiR::oml_stop_Daemon(oml_repository)\n\n[1] \"Stopping Daemon(s)\" \"1 Daemon stopped\"  \n\nomlhashiR::oml_build(oml_repository)\n\n [1] \"Starting a Gradle Daemon, 2 stopped Daemons could not be reused, use --status for details\"\n [2] \"&gt; Task :omlZip UP-TO-DATE\"                                                                \n [3] \"&gt; Task :assemble UP-TO-DATE\"                                                              \n [4] \"&gt; Task :downloadDependencies UP-TO-DATE\"                                                  \n [5] \"&gt; Task :omlToOwl UP-TO-DATE\"                                                              \n [6] \"&gt; Task :owlReason UP-TO-DATE\"                                                             \n [7] \"&gt; Task :check UP-TO-DATE\"                                                                 \n [8] \"&gt; Task :build UP-TO-DATE\"                                                                 \n [9] \"\"                                                                                         \n[10] \"BUILD SUCCESSFUL in 4s\"                                                                   \n[11] \"4 actionable tasks: 4 up-to-date\"                                                         \n\nomlhashiR::oml_owlLoad(oml_repository)\n\n [1] \"&gt; Task :downloadDependencies UP-TO-DATE\"        \n [2] \"&gt; Task :omlToOwl UP-TO-DATE\"                    \n [3] \"&gt; Task :owlReason UP-TO-DATE\"                   \n [4] \"\"                                               \n [5] \"&gt; Task :startFuseki\"                            \n [6] \"Fuseki server is already running with pid=50280\"\n [7] \"\"                                               \n [8] \"&gt; Task :owlLoad\"                                \n [9] \"\"                                               \n[10] \"BUILD SUCCESSFUL in 4s\"                         \n[11] \"5 actionable tasks: 2 executed, 3 up-to-date\""
  },
  {
    "objectID": "chapters/02_interface/assembly_interface.html#query",
    "href": "chapters/02_interface/assembly_interface.html#query",
    "title": "7  Assembly Interface",
    "section": "7.6 Query",
    "text": "7.6 Query\n\nlibrary(tansakusuR)\nendpoint_url &lt;- \"http://localhost:3030/open-source-rover/sparql\"\n\n\nquery_string &lt;-'\nPREFIX base:        &lt;http://imce.jpl.nasa.gov/foundation/base#&gt;\nPREFIX mission:     &lt;http://imce.jpl.nasa.gov/foundation/mission#&gt;\nPREFIX structure:   &lt;http://opencaesar.io/open-source-rover/vocabulary/structure#&gt;\nPREFIX rdfs:        &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\n\nSELECT DISTINCT ?c1_localname ?c1_id ?c1_name ?c1_type ?c2_localname ?c2_id ?c2_name\nWHERE {\n    ?c1 a structure:Assembly ;\n      base:hasIdentifier ?c1_id;\n      base:hasCanonicalName ?c1_name .\n    OPTIONAL{\n        ?c1 base:isContainedIn ?c2 .\n        OPTIONAL{\n            ?c2 base:hasIdentifier ?c2_id;\n                base:hasCanonicalName ?c2_name .\n        }\n    }\n    # Extract the local name\n    BIND(STRAFTER(STR(?c1), \"#\") AS ?c1_localname) .\n    BIND(STRAFTER(STR(?c2), \"#\") AS ?c2_localname) .\n\n    OPTIONAL {\n        ?c1 a structure:System ;\n            BIND(\"structure:System\"  AS ?c1_type) .\n    }    \n    OPTIONAL {\n        ?c1 a structure:Subsystem ;\n            BIND(\"structure:Subsystem\"  AS ?c1_type) .\n    } \n    OPTIONAL {\n        ?c1 a structure:Assembly ;\n            BIND(\"structure:Assembly\"  AS ?c1_type) .\n    } \n    OPTIONAL {\n        ?c1 a structure:Part ;\n            BIND(\"structure:Part\"  AS ?c1_type) .\n    } \n}\nORDER BY ?c2_localname \n'\ndf_query &lt;- tansakusuR::send_query(endpoint_url,query_string)\ndatatable(df_query, options = list(pageLength = 20))\n\n\n\n\n\n\n\n7.6.1 Create a workbook for define interfaces\n\ndf_worksheet &lt;-data.frame(\n  c1 = \"\",\n  c2 = \"\"\n)\n\n\ndf_worksheet &lt;- df_worksheet %&gt;% \n  add_row(c1 = \"body-assembly\", c2 = \"rocker-bogie-suspension-assembly-1\") %&gt;%\n  add_row(c1 = \"body-assembly\", c2 = \"rocker-bogie-suspension-assembly-2\") %&gt;%\n  add_row(c1 = \"rocker-bogie-suspension-assembly-1\", c2 = \"corner-wheel-assembly-1\") %&gt;%\n  add_row(c1 = \"rocker-bogie-suspension-assembly-1\", c2 = \"corner-wheel-assembly-4\") %&gt;%\n  add_row(c1 = \"rocker-bogie-suspension-assembly-1\", c2 = \"drive-wheel-assembly-1\") %&gt;%\n  add_row(c1 = \"rocker-bogie-suspension-assembly-2\", c2 = \"corner-wheel-assembly-2\") %&gt;%\n  add_row(c1 = \"rocker-bogie-suspension-assembly-2\", c2 = \"corner-wheel-assembly-3\") %&gt;%\n  add_row(c1 = \"rocker-bogie-suspension-assembly-2\", c2 = \"drive-wheel-assembly-2\") \n\ndf_worksheet &lt;- df_worksheet[-1,] %&gt;%\n  mutate(junction_id = paste0(\"J.\", sprintf(\"%03d\", row_number()))) %&gt;%\n  mutate(junction_name = paste0(\"junction\", sprintf(\"%03d\", row_number())))\n  \n\ndf_worksheet\n\n                                  c1                                 c2\n2                      body-assembly rocker-bogie-suspension-assembly-1\n3                      body-assembly rocker-bogie-suspension-assembly-2\n4 rocker-bogie-suspension-assembly-1            corner-wheel-assembly-1\n5 rocker-bogie-suspension-assembly-1            corner-wheel-assembly-4\n6 rocker-bogie-suspension-assembly-1             drive-wheel-assembly-1\n7 rocker-bogie-suspension-assembly-2            corner-wheel-assembly-2\n8 rocker-bogie-suspension-assembly-2            corner-wheel-assembly-3\n9 rocker-bogie-suspension-assembly-2             drive-wheel-assembly-2\n  junction_id junction_name\n2       J.001   junction001\n3       J.002   junction002\n4       J.003   junction003\n5       J.004   junction004\n6       J.005   junction005\n7       J.006   junction006\n8       J.007   junction007\n9       J.008   junction008\n\n\n\n\n7.6.2 Generate Description of interface and junction\n\n# Generate color table\nlook &lt;- data.frame(\n  assembly = df_query$c1_localname,\n  id = df_query$c1_id\n)\n\n# Set Colors\ndf_tidy &lt;-df_worksheet %&gt;%\n  mutate(id = look$id[match(unlist(df_worksheet$c1), look$assembly)])\n\n\n# sourceの種類ごとにidを振る関数\nset_id &lt;- function(source,source_id) {\n  # sourceの値をindexに変換\n  index &lt;- \"IF.\"\n    # 連番を生成\n  number &lt;- seq_along(source)\n  # sprintf関数でゼロ埋めする\n  number_padded &lt;- sprintf(\"%03d\", number)\n  # indexとnumberを結合してidを返す\n  paste0(index, source_id, \".\", number_padded)\n}\n\n\n# sourceの種類ごとにidを振る関数\nset_interface_name &lt;- function(source,source_id) {\n  # sourceの値をindexに変換\n  index &lt;- \".if\"\n    # 連番を生成\n  number &lt;- seq_along(source)\n  # sprintf関数でゼロ埋めする\n  number_padded &lt;- sprintf(\"%03d\", number)\n  # indexとnumberを結合してidを返す\n  paste0(source, index, number_padded)\n}\n\n\n# sourceの種類ごとにidを振る関数\nset_presents_interface_name &lt;- function(source,source_id) {\n  # sourceの値をindexに変換\n  index &lt;- \".if\"\n    # 連番を生成\n  number &lt;- seq_along(source)\n  # sprintf関数でゼロ埋めする\n  number_padded &lt;- sprintf(\"%03d\", number)\n  # indexとnumberを結合してidを返す\n  paste0(source, \".presents\", index, number_padded)\n}\n\n\ndf_tidy &lt;- data.frame(\n  source = df_worksheet$c1,\n  target = df_worksheet$c2,\n  junction = df_worksheet$junction_id\n) %&gt;%\n  add_row(source = df_worksheet$c2, target = df_worksheet$c1, junction=df_worksheet$junction_id)\n\ndf_tidy &lt;- df_tidy %&gt;%\n  mutate(source_id = look$id[match(unlist(df_tidy$source), look$assembly)]) %&gt;%\n  mutate(target_id = look$id[match(unlist(df_tidy$target), look$assembly)]) %&gt;%\n  arrange(source_id) %&gt;%\n  # sourceの種類ごとにグループ化する\n  group_by(source) %&gt;%\n  # 新しい列にidを振る\n  mutate(interface_id = set_id(source,source_id)) %&gt;%\n  mutate(interface_name = set_interface_name(source,source_id)) %&gt;%\n  mutate(interface_presents = set_presents_interface_name(source,source_id)) %&gt;%\n  # グループ化を解除する\n  ungroup()\n\n\n\n7.6.3 Initialize OML File\n\noutputdir &lt;- paste0(omlrepo,\"src/oml/opencaesar.io/open-source-rover/description/assembly/\")\n\noutputfile &lt;- paste0(outputdir, \"interface.oml\")\ninit_oml_file &lt;- \n\"description &lt;http://opencaesar.io/open-source-rover/description/assembly/interface.oml#&gt; as interface {\\n}\\n\"\ncat(file=outputfile, init_oml_file)\n\n\n\n7.6.4 Generate framework of interface.oml\n\nomldescriptions &lt;-\n\"description &lt;http://opencaesar.io/open-source-rover/description/assembly/interface#&gt; as interface {\n\n  uses &lt;http://imce.jpl.nasa.gov/foundation/base#&gt; as base\n  uses &lt;http://imce.jpl.nasa.gov/foundation/mission#&gt; as mission\n  extends &lt;http://opencaesar.io/open-source-rover/description/assembly/assembly#&gt; as assembly\n\n\"\n\n\n\n7.6.5 Function to generate structure:Part descriptions\n    instance AssyA1.if02 : mission:Interface[\n        base:hasIdentifier \"IF.A.01.02\"\n        base:hasCanonicalName \"A1 IF02\"\n    ]\n\n    relation instance AssyA1.presents.if01 : mission:Presents[\n        from  AssyA1\n        to AssyA1.if01\n    ]\n\n    \n\ngenerateInterfaceDescriptions &lt;- function(df, header){\n  \n  df_in &lt;- df\n  \n  text &lt;- paste0(\"// \", header, \"\\n\")\n  text_instance &lt;- \"\"\n  text_ref &lt;- \"\"\n\n#  id_count &lt;- 1\n  type &lt;- \"mission:Interface\"\n  ref_type &lt;- \"mission:Presents\"\n\n  for (i in 1:nrow(df_in)){\n# index &lt;- \"A\"    \n#    id &lt;- paste0(index, \".\", formatC(i, width = 2, flag=\"0\"))\n    text_instance &lt;- paste0(text_instance,\n                   \"    instance \", df_in$interface_name[i], \" : \", type, \" [\",\"\\n\",\n                   \"        base:hasIdentifier \\\"\", df_in$interface_id[i],\"\\\"\\n\",\n                   \"    ]\\n\"\n                   )\n    text_ref &lt;- paste0(text_ref,\n                   \"    relation instance \", df_in$interface_presents[i], \" : \", ref_type, \" [\",\"\\n\",\n                   \"        from assembly:\", df_in$source[i],\"\\n\",\n                   \"        to \", df_in$interface_name[i],\"\\n\",\n                   \"    ]\\n\"\n                   )\n  }\n\n  # text_ref &lt;- paste0(text_ref,\n  #                  \"  ]\\n\\n\"\n  #                  )\n\n  text &lt;- paste0(text, text_instance, text_ref)\n  return(text)\n}\n\n\nheader &lt;- c(\"Interface - Assembly\")\ninstance &lt;- generateInterfaceDescriptions(df_tidy, header)\nomldescriptions &lt;- paste0(omldescriptions, instance,\"\\n\")\n\n\ngenerateJunctionDescriptions &lt;- function(df, header){\n  \n  df_in &lt;- df\n  \n  text &lt;- paste0(\"// \", header, \"\\n\")\n  text_instance &lt;- \"\"\n  text_ref &lt;- \"\"\n\n#  id_count &lt;- 1\n  type &lt;- \"mission:Junction\"\n\n  for (i in 1:nrow(df_in)){\n# index &lt;- \"A\"    \n#    id &lt;- paste0(index, \".\", formatC(i, width = 2, flag=\"0\"))\n    text_instance &lt;- paste0(text_instance,\n                   \"    instance \", df_in$junction_name[i], \" : \", type, \" [\",\"\\n\",\n                   \"        mission:joins1 \", df_in$join1[i],\"\\n\",\n                   \"        mission:joins2 \", df_in$join2[i],\"\\n\",\n                   \"    ]\\n\"\n                   )\n  }\n\n  # text_ref &lt;- paste0(text_ref,\n  #                  \"  ]\\n\\n\"\n  #                  )\n\n  text &lt;- paste0(text, text_instance, text_ref)\n  return(text)\n}\n\n\n\n7.6.6 Create Junction join1 and join2\n\ndf_junction &lt;- df_worksheet %&gt;%\n  left_join(df_tidy, by =c(\"junction_id\" = \"junction\", \"c1\" = \"source\"), keep=FALSE) %&gt;%\n  mutate(join1 = interface_name) %&gt;%\n  select(c(colnames(df_worksheet),\"join1\")) %&gt;%\n  left_join(df_tidy, by =c(\"junction_id\" = \"junction\", \"c2\" = \"source\"), keep=FALSE) %&gt;%\n  mutate(join2 = interface_name) %&gt;%\n  select(c(colnames(df_worksheet),\"join1\",\"join2\"))\n\n\nheader &lt;- c(\"Junction - Join\")\ninstance &lt;- generateJunctionDescriptions(df_junction, header)\nomldescriptions &lt;- paste0(omldescriptions, instance,\"\\n\")"
  },
  {
    "objectID": "chapters/02_interface/assembly_interface.html#generate-oml-file",
    "href": "chapters/02_interface/assembly_interface.html#generate-oml-file",
    "title": "7  Assembly Interface",
    "section": "7.7 Generate OML File",
    "text": "7.7 Generate OML File\n\nomldescriptions &lt;- paste0(omldescriptions,\"\\n}\\n\")\ncat(omldescriptions)\n\ndescription &lt;http://opencaesar.io/open-source-rover/description/assembly/interface#&gt; as interface {\n\n  uses &lt;http://imce.jpl.nasa.gov/foundation/base#&gt; as base\n  uses &lt;http://imce.jpl.nasa.gov/foundation/mission#&gt; as mission\n  extends &lt;http://opencaesar.io/open-source-rover/description/assembly/assembly#&gt; as assembly\n\n// Interface - Assembly\n    instance body-assembly.if001 : mission:Interface [\n        base:hasIdentifier \"IF.A.01.001\"\n    ]\n    instance body-assembly.if002 : mission:Interface [\n        base:hasIdentifier \"IF.A.01.002\"\n    ]\n    instance drive-wheel-assembly-1.if001 : mission:Interface [\n        base:hasIdentifier \"IF.A.02.001\"\n    ]\n    instance drive-wheel-assembly-2.if001 : mission:Interface [\n        base:hasIdentifier \"IF.A.03.001\"\n    ]\n    instance corner-wheel-assembly-1.if001 : mission:Interface [\n        base:hasIdentifier \"IF.A.04.001\"\n    ]\n    instance corner-wheel-assembly-2.if001 : mission:Interface [\n        base:hasIdentifier \"IF.A.05.001\"\n    ]\n    instance corner-wheel-assembly-3.if001 : mission:Interface [\n        base:hasIdentifier \"IF.A.06.001\"\n    ]\n    instance corner-wheel-assembly-4.if001 : mission:Interface [\n        base:hasIdentifier \"IF.A.07.001\"\n    ]\n    instance rocker-bogie-suspension-assembly-1.if001 : mission:Interface [\n        base:hasIdentifier \"IF.A.08.001\"\n    ]\n    instance rocker-bogie-suspension-assembly-1.if002 : mission:Interface [\n        base:hasIdentifier \"IF.A.08.002\"\n    ]\n    instance rocker-bogie-suspension-assembly-1.if003 : mission:Interface [\n        base:hasIdentifier \"IF.A.08.003\"\n    ]\n    instance rocker-bogie-suspension-assembly-1.if004 : mission:Interface [\n        base:hasIdentifier \"IF.A.08.004\"\n    ]\n    instance rocker-bogie-suspension-assembly-2.if001 : mission:Interface [\n        base:hasIdentifier \"IF.A.09.001\"\n    ]\n    instance rocker-bogie-suspension-assembly-2.if002 : mission:Interface [\n        base:hasIdentifier \"IF.A.09.002\"\n    ]\n    instance rocker-bogie-suspension-assembly-2.if003 : mission:Interface [\n        base:hasIdentifier \"IF.A.09.003\"\n    ]\n    instance rocker-bogie-suspension-assembly-2.if004 : mission:Interface [\n        base:hasIdentifier \"IF.A.09.004\"\n    ]\n    relation instance body-assembly.presents.if001 : mission:Presents [\n        from assembly:body-assembly\n        to body-assembly.if001\n    ]\n    relation instance body-assembly.presents.if002 : mission:Presents [\n        from assembly:body-assembly\n        to body-assembly.if002\n    ]\n    relation instance drive-wheel-assembly-1.presents.if001 : mission:Presents [\n        from assembly:drive-wheel-assembly-1\n        to drive-wheel-assembly-1.if001\n    ]\n    relation instance drive-wheel-assembly-2.presents.if001 : mission:Presents [\n        from assembly:drive-wheel-assembly-2\n        to drive-wheel-assembly-2.if001\n    ]\n    relation instance corner-wheel-assembly-1.presents.if001 : mission:Presents [\n        from assembly:corner-wheel-assembly-1\n        to corner-wheel-assembly-1.if001\n    ]\n    relation instance corner-wheel-assembly-2.presents.if001 : mission:Presents [\n        from assembly:corner-wheel-assembly-2\n        to corner-wheel-assembly-2.if001\n    ]\n    relation instance corner-wheel-assembly-3.presents.if001 : mission:Presents [\n        from assembly:corner-wheel-assembly-3\n        to corner-wheel-assembly-3.if001\n    ]\n    relation instance corner-wheel-assembly-4.presents.if001 : mission:Presents [\n        from assembly:corner-wheel-assembly-4\n        to corner-wheel-assembly-4.if001\n    ]\n    relation instance rocker-bogie-suspension-assembly-1.presents.if001 : mission:Presents [\n        from assembly:rocker-bogie-suspension-assembly-1\n        to rocker-bogie-suspension-assembly-1.if001\n    ]\n    relation instance rocker-bogie-suspension-assembly-1.presents.if002 : mission:Presents [\n        from assembly:rocker-bogie-suspension-assembly-1\n        to rocker-bogie-suspension-assembly-1.if002\n    ]\n    relation instance rocker-bogie-suspension-assembly-1.presents.if003 : mission:Presents [\n        from assembly:rocker-bogie-suspension-assembly-1\n        to rocker-bogie-suspension-assembly-1.if003\n    ]\n    relation instance rocker-bogie-suspension-assembly-1.presents.if004 : mission:Presents [\n        from assembly:rocker-bogie-suspension-assembly-1\n        to rocker-bogie-suspension-assembly-1.if004\n    ]\n    relation instance rocker-bogie-suspension-assembly-2.presents.if001 : mission:Presents [\n        from assembly:rocker-bogie-suspension-assembly-2\n        to rocker-bogie-suspension-assembly-2.if001\n    ]\n    relation instance rocker-bogie-suspension-assembly-2.presents.if002 : mission:Presents [\n        from assembly:rocker-bogie-suspension-assembly-2\n        to rocker-bogie-suspension-assembly-2.if002\n    ]\n    relation instance rocker-bogie-suspension-assembly-2.presents.if003 : mission:Presents [\n        from assembly:rocker-bogie-suspension-assembly-2\n        to rocker-bogie-suspension-assembly-2.if003\n    ]\n    relation instance rocker-bogie-suspension-assembly-2.presents.if004 : mission:Presents [\n        from assembly:rocker-bogie-suspension-assembly-2\n        to rocker-bogie-suspension-assembly-2.if004\n    ]\n\n// Junction - Join\n    instance junction001 : mission:Junction [\n        mission:joins1 body-assembly.if001\n        mission:joins2 rocker-bogie-suspension-assembly-1.if004\n    ]\n    instance junction002 : mission:Junction [\n        mission:joins1 body-assembly.if002\n        mission:joins2 rocker-bogie-suspension-assembly-2.if004\n    ]\n    instance junction003 : mission:Junction [\n        mission:joins1 rocker-bogie-suspension-assembly-1.if001\n        mission:joins2 corner-wheel-assembly-1.if001\n    ]\n    instance junction004 : mission:Junction [\n        mission:joins1 rocker-bogie-suspension-assembly-1.if002\n        mission:joins2 corner-wheel-assembly-4.if001\n    ]\n    instance junction005 : mission:Junction [\n        mission:joins1 rocker-bogie-suspension-assembly-1.if003\n        mission:joins2 drive-wheel-assembly-1.if001\n    ]\n    instance junction006 : mission:Junction [\n        mission:joins1 rocker-bogie-suspension-assembly-2.if001\n        mission:joins2 corner-wheel-assembly-2.if001\n    ]\n    instance junction007 : mission:Junction [\n        mission:joins1 rocker-bogie-suspension-assembly-2.if002\n        mission:joins2 corner-wheel-assembly-3.if001\n    ]\n    instance junction008 : mission:Junction [\n        mission:joins1 rocker-bogie-suspension-assembly-2.if003\n        mission:joins2 drive-wheel-assembly-2.if001\n    ]\n\n\n}\n\ncat(file=outputfile, omldescriptions)\n\n```"
  },
  {
    "objectID": "chapters/02_interface/assembly_interface.html#analysis",
    "href": "chapters/02_interface/assembly_interface.html#analysis",
    "title": "7  Assembly Interface",
    "section": "7.8 Analysis",
    "text": "7.8 Analysis"
  },
  {
    "objectID": "chapters/02_interface/assembly_interface.html#visualize",
    "href": "chapters/02_interface/assembly_interface.html#visualize",
    "title": "7  Assembly Interface",
    "section": "7.9 Visualize",
    "text": "7.9 Visualize"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_assembly.html",
    "href": "chapters/02_assembly_parts/create_descriptions_assembly.html",
    "title": "5  Create Assembly Description",
    "section": "",
    "text": "6 relation to Subsystem\nref_instance &lt;- generateSubsystemRefDescriptions(df_instance_assembly)\n\ncat(ref_instance)\n\n//ref to Subsystem\n    ref instance subsystems:MechanicalSubsystem [\n        ^structure:hasAssembly body-assembly\n        ^structure:hasAssembly rocker-bogie-suspension-assembly-1\n        ^structure:hasAssembly rocker-bogie-suspension-assembly-2\n        ^structure:hasAssembly mechanical-harness\n    ]\n\n    ref instance subsystems:MobilitySubsystem [\n        ^structure:hasAssembly drive-wheel-assembly-1\n        ^structure:hasAssembly drive-wheel-assembly-2\n        ^structure:hasAssembly corner-wheel-assembly-1\n        ^structure:hasAssembly corner-wheel-assembly-2\n        ^structure:hasAssembly corner-wheel-assembly-3\n        ^structure:hasAssembly corner-wheel-assembly-4\n    ]\n\nomldescriptions &lt;- paste0(omldescriptions, ref_instance,\"\\n\")"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_assembly.html#initialize-oml-file",
    "href": "chapters/02_assembly_parts/create_descriptions_assembly.html#initialize-oml-file",
    "title": "5  Create Assembly Description",
    "section": "5.1 Initialize OML File",
    "text": "5.1 Initialize OML File\n\noutputdir &lt;- paste0(omlrepo,\"src/oml/opencaesar.io/open-source-rover/description/assembly/\")\n\noutputfile &lt;- paste0(outputdir, \"assembly.oml\")\ninit_oml_file &lt;- \n\"description &lt;http://opencaesar.io/open-source-rover/description/assembly/assembly#&gt; as assembly {\\n}\\n\"\ncat(file=outputfile, init_oml_file)\n\n\noutputfile &lt;- paste0(outputdir, \"parts.oml\")\ninit_oml_file &lt;- \n\"description &lt;http://opencaesar.io/open-source-rover/description/assembly/parts#&gt; as parts {\\n}\\n\"\ncat(file=outputfile, init_oml_file)"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_assembly.html#modeling-mechanical-assembly",
    "href": "chapters/02_assembly_parts/create_descriptions_assembly.html#modeling-mechanical-assembly",
    "title": "5  Create Assembly Description",
    "section": "5.2 Modeling Mechanical Assembly",
    "text": "5.2 Modeling Mechanical Assembly\n“Assembly” descriptions are created from parts_list\n\n5.2.1 Import from github\n\nurl &lt;- \"https://raw.githubusercontent.com/nasa-jpl/open-source-rover/master/parts_list/parts_list.csv\"\ndf_csv &lt;- read.csv(url)\n\n\n\n5.2.2 Tidy Data\n\ncolnames(df_csv) &lt;- c(\"assembly\",\"short name\",\"part number\",\"long name\",\"link\",\"cost\",\"number req in assy\",\"assembly multiplier\")\n\n\n\n5.2.3 Explore Data\n\nParts\nIn parts list, we can observe duplicated parts as follows.\n\ndf_csv %&gt;% \n  group_by(`part number`) %&gt;%\n  filter(n()&gt;1) %&gt;%\n  arrange(`part number`)\n\n# A tibble: 4 × 8\n# Groups:   part number [2]\n  assembly     `short name`     `part number`  `long name`           link  cost \n  &lt;chr&gt;        &lt;chr&gt;            &lt;chr&gt;          &lt;chr&gt;                 &lt;chr&gt; &lt;chr&gt;\n1 rocker bogie 3x5 grid plate   1116-0024-0040 1116 Series Grid Pla… http… $1.29\n2 body         3x5 grid plate   1116-0024-0040 1116 Series Grid Pla… http… $1.29\n3 drive wheel  2 Hole U channel 1120-0002-0072 1120 Series U-Channe… http… $4.99\n4 body         2 Hole U channel 1120-0002-0072 1120 Series U-Channe… http… $4.99\n# ℹ 2 more variables: `number req in assy` &lt;dbl&gt;, `assembly multiplier` &lt;int&gt;\n\n\nThe part numbers are the same, but the part names and properties are slightly different.\n\n\nAssembly\n\nunique(df_csv$assembly)\n\n[1] \"drive wheel\"  \"corner\"       \"rocker bogie\" \"body\"         \"general\"     \n\n\nData is grouped by “assembly”.\n\ndrive wheel\ncorner\nrocker bogie\nbody\ngeneral\n\nThis means An \"Assembly\" has \"Part\"s.\nSo we will add structure:Part and structure:Assembly as a specialization of mission:Component to our oml model.\na structure:Subsystem has a structure:Assembly.\na structure:Assembly has a structure:Part.\nThe updated model is shown below.\n\nvocabulary &lt;http://opencaesar.io/open-source-rover/vocabulary/structure#&gt; as ^structure {\n\n    extends &lt;http://imce.jpl.nasa.gov/foundation/mission#&gt; as mission\n\n    extends &lt;http://imce.jpl.nasa.gov/foundation/base#&gt; as base\n\n    concept System &lt; mission:Component\n\n    concept Subsystem &lt; mission:Component\n\n    relation hasSubsystem [\n        from System\n        to Subsystem\n    ] &lt; base:contains\n\n    concept Assembly &lt; mission:Component\n    \n    relation hasAssembly [\n        from Subsystem\n        to Assembly\n    ] &lt; base:contains\n\n    concept Part &lt; mission:Component\n    \n    relation hasPart [\n        from Assembly\n        to Part\n    ] &lt; base:contains\n\n\n}\n\nOnce we add new vocabulary, let’s check the consistency of our model using owlReason.\n\nlibrary(omlhashiR)\n# oml_repository &lt;- \"../open-source-rover/\"\noml_repository &lt;- omlrepo\nomlhashiR::oml_refresh()\n\n[1] \"kill success for pid=41589\"\n\nomlhashiR::oml_stop_Daemon(oml_repository)\n\n[1] \"Stopping Daemon(s)\" \"1 Daemon stopped\"  \n\nomlhashiR::oml_build(oml_repository)\n\n [1] \"Starting a Gradle Daemon, 5 stopped Daemons could not be reused, use --status for details\"\n [2] \"&gt; Task :omlZip UP-TO-DATE\"                                                                \n [3] \"&gt; Task :assemble UP-TO-DATE\"                                                              \n [4] \"&gt; Task :downloadDependencies UP-TO-DATE\"                                                  \n [5] \"&gt; Task :omlToOwl UP-TO-DATE\"                                                              \n [6] \"&gt; Task :owlReason UP-TO-DATE\"                                                             \n [7] \"&gt; Task :check UP-TO-DATE\"                                                                 \n [8] \"&gt; Task :build UP-TO-DATE\"                                                                 \n [9] \"\"                                                                                         \n[10] \"BUILD SUCCESSFUL in 5s\"                                                                   \n[11] \"4 actionable tasks: 4 up-to-date\"                                                         \n\nomlhashiR::oml_owlLoad(oml_repository)\n\n [1] \"&gt; Task :downloadDependencies UP-TO-DATE\"                                                      \n [2] \"&gt; Task :omlToOwl UP-TO-DATE\"                                                                  \n [3] \"&gt; Task :owlReason UP-TO-DATE\"                                                                 \n [4] \"\"                                                                                             \n [5] \"&gt; Task :startFuseki\"                                                                          \n [6] \"Fuseki server has now successfully started with pid=43879, listening on http://localhost:3030\"\n [7] \"\"                                                                                             \n [8] \"&gt; Task :owlLoad\"                                                                              \n [9] \"\"                                                                                             \n[10] \"BUILD SUCCESSFUL in 8s\"                                                                       \n[11] \"5 actionable tasks: 2 executed, 3 up-to-date\"                                                 \n\n\n\n\n\n5.2.4 Modeling assembly data\nThe descriptions of assemblies between parts_list and CAD model are different.\n\n\n\n\n\nOSR CAD Model\n\n\n\n\nWe chose assembly definitions from the CAD model.\nBelow assembly data is a description for structure:Assemblyin OML model.\n\ndf_instance_assembly &lt;- data.frame(\n  name = c(\"Body Assembly\", \n           \"Drive Wheel Assembly-1\",\n           \"Drive Wheel Assembly-2\",\n           \"Corner Wheel Assembly-1\",\n           \"Corner Wheel Assembly-2\",\n           \"Corner Wheel Assembly-3\",\n           \"Corner Wheel Assembly-4\",\n           \"Rocker Bogie Suspension Assembly-1\",\n           \"Rocker Bogie Suspension Assembly-2\",\n           \"Mechanical Harness\"),\n  instancename = c(\"body-assembly\",\n                   \"drive-wheel-assembly-1\",\n                   \"drive-wheel-assembly-2\",\n                   \"corner-wheel-assembly-1\",\n                   \"corner-wheel-assembly-2\",\n                   \"corner-wheel-assembly-3\",\n                   \"corner-wheel-assembly-4\",\n                   \"rocker-bogie-suspension-assembly-1\",\n                   \"rocker-bogie-suspension-assembly-2\",\n                   \"mechanical-harness\"\n                  )\n) %&gt;% \n  mutate(type = \"assembly\") %&gt;%\n  mutate(hasDescription = \"\")\n\n\n\n5.2.5 Add relationship to subsystem\nWe define the relationship between assemblies and subsystems as follows.\n\ndf_instance_assembly &lt;- df_instance_assembly %&gt;%\n  mutate(ownedSubsystem =c(\"subsystems:MechanicalSubsystem\",\n                           \"subsystems:MobilitySubsystem\",\n                           \"subsystems:MobilitySubsystem\",\n                           \"subsystems:MobilitySubsystem\",\n                           \"subsystems:MobilitySubsystem\",\n                           \"subsystems:MobilitySubsystem\",\n                           \"subsystems:MobilitySubsystem\",\n                           \"subsystems:MechanicalSubsystem\",\n                           \"subsystems:MechanicalSubsystem\",\n                           \"subsystems:MechanicalSubsystem\"\n                           )\n         )\n\n\n\n5.2.6 Add descriptions to assembly\n\nRocker-Bogie Suspension\n\ntext &lt;- \"The Rocker-Bogie is the suspension system that enables the rover to climb aggressive obstacles. The design allows all 6 wheels to be in contact with the ground as much as possible, increasing traction. The suspension system on a typical consumer vehicle can traverse obstacles about half the height of one wheel; the Rocker-Bogie suspension system can traverse obstacles over 2 times the height of the wheel.\"\n\ndf_instance_assembly$hasDescription[df_instance_assembly$name==\"Rocker Bogie Suspension Assembly-1\"] &lt;- text\ndf_instance_assembly$hasDescription[df_instance_assembly$name==\"Rocker Bogie Suspension Assembly-2\"] &lt;- text\n\n\n\n\n5.2.7 Function to generate instance descriptions.\n\ngenerateAssemblyDescriptions &lt;- function(df){\n  \n  df_in &lt;- df\n  \n  text &lt;- paste0(\"// Assembly Instances\\n\")\n  text_instance &lt;- \"\"\n\n  for (i in 1:nrow(df_in)){\n    id &lt;- paste0(\"A\", \".\", formatC(i, width = 2, flag=\"0\"))\n    type &lt;- \"structure:Assembly\"\n    text_instance &lt;- paste0(text_instance,\n                   \"    instance \", df_in$instancename[i], \" : \", type, \" [\",\"\\n\",\n                   \"        base:hasIdentifier \\\"\", id,\"\\\"\\n\",\n                   \"        base:hasCanonicalName \\\"\",df_in$name[i],\"\\\"\\n\",\n                   \"        base:hasShortName \\\"\",df_in$name[i],\"\\\"\\n\",\n                   \"        base:hasDescription \\\"\",df_in$hasDescription[i],\"\\\"\\n\",\n                   \"    ]\\n\"\n                   )\n  }\n\n  text &lt;- paste0(text, text_instance)\n  return(text)\n}\n\n\n\n5.2.8 Function to generate reference instance descriptions.\nThis function generates ref instance following below pattern.\n    ref instance subsystems:MechanicalSubsystem [\n        ^structure:hasAssembly body-assembly\n    ]\n\ngenerateSubsystemRefDescriptions &lt;- function(df){\n\n  # df &lt;- df_instance_assembly # for debug\n  \n  subsystem &lt;- as.list(unique(df$ownedSubsystem))\n  \n  text &lt;- paste0(\"//ref to Subsystem\",\"\\n\")\n  text_ref &lt;- \"\"\n  \n  for(j in 1:length(subsystem)){\n    ref_instance &lt;- subsystem[j]\n    df_instance &lt;- df %&gt;%\n      filter(df$ownedSubsystem == ref_instance)\n    \n    text_ref &lt;- paste0(text_ref,\n                   \"    ref instance \", ref_instance, \" [\",\"\\n\"\n                   )\n    \n    for (i in 1:nrow(df_instance)){\n      text_ref &lt;- paste0(text_ref,\n                     \"      ^structure:hasAssembly \", df_instance$instancename[i],\"\\n\"\n                     )\n    }\n    text_ref &lt;- paste0(text_ref,\n                       \"    ]\\n\\n\"\n                       )\n    \n  }\n  \n  text &lt;- paste0(text, text_ref)\n  \n  return(text)\n}   \n\n\n\n5.2.9 Output OML FILE\n\n# outputdir &lt;- \"~/Workspaces/gitlab/OSR_local/open-source-rover/src/oml/opencaesar.io/open-source-rover/description/assembly/\"\n#outputdir &lt;-\"./open-source-rover/src/oml/opencaesar.io/open-source-rover/description/assembly/\"\n# outputdir &lt;-\"./\"\noutputfile &lt;- paste0(outputdir, \"assembly.oml\")\n\nassemly.omlのフレーム作成\n\nomldescriptions &lt;-\n\"description &lt;http://opencaesar.io/open-source-rover/description/assembly/assembly#&gt; as assembly {\n    \n    uses &lt;http://imce.jpl.nasa.gov/foundation/base#&gt; as base\n    uses &lt;http://opencaesar.io/open-source-rover/vocabulary/structure#&gt; as ^structure\n\n  extends &lt;http://opencaesar.io/open-source-rover/description/structure/subsystems#&gt; as subsystems\n  \n\"\n\n\n\n5.2.10 Assembly Instances : OK\n\ninstance &lt;- generateAssemblyDescriptions(df_instance_assembly)\n\n# cat(instance)\nomldescriptions &lt;- paste0(omldescriptions, instance,\"\\n\")"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_assembly.html#generate-oml-file",
    "href": "chapters/02_assembly_parts/create_descriptions_assembly.html#generate-oml-file",
    "title": "5  Create Assembly Description",
    "section": "6.1 Generate OML File",
    "text": "6.1 Generate OML File\n\nomldescriptions &lt;- paste0(omldescriptions,\"\\n}\\n\")\ncat(file=outputfile, omldescriptions)"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_assembly.html#validate-model",
    "href": "chapters/02_assembly_parts/create_descriptions_assembly.html#validate-model",
    "title": "5  Create Assembly Description",
    "section": "6.2 Validate Model",
    "text": "6.2 Validate Model\nBefore we check the model, add below codes to the description bundle.\n\n    includes &lt;http://opencaesar.io/open-source-rover/description/assembly/assembly#&gt;\n\n\nomlhashiR::oml_build(oml_repository)\n\n [1] \"&gt; Task :omlZip\"                              \n [2] \"&gt; Task :assemble\"                            \n [3] \"&gt; Task :downloadDependencies UP-TO-DATE\"     \n [4] \"&gt; Task :omlToOwl\"                            \n [5] \"&gt; Task :owlReason\"                           \n [6] \"&gt; Task :check\"                               \n [7] \"&gt; Task :build\"                               \n [8] \"\"                                            \n [9] \"BUILD SUCCESSFUL in 6s\"                      \n[10] \"4 actionable tasks: 3 executed, 1 up-to-date\"\n\nomlhashiR::oml_owlLoad(oml_repository)\n\n[1] \"&gt; Task :downloadDependencies UP-TO-DATE\"     \n[2] \"&gt; Task :omlToOwl UP-TO-DATE\"                 \n[3] \"&gt; Task :owlReason UP-TO-DATE\"                \n[4] \"&gt; Task :startFuseki UP-TO-DATE\"              \n[5] \"&gt; Task :owlLoad\"                             \n[6] \"\"                                            \n[7] \"BUILD SUCCESSFUL in 3s\"                      \n[8] \"5 actionable tasks: 1 executed, 4 up-to-date\""
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_assembly.html#query",
    "href": "chapters/02_assembly_parts/create_descriptions_assembly.html#query",
    "title": "5  Create Assembly Description",
    "section": "6.3 Query",
    "text": "6.3 Query\n\nlibrary(tansakusuR)\nendpoint_url &lt;- \"http://localhost:3030/open-source-rover/sparql\"\n\n\n6.3.1 Extract mission:Component Hierarchy\n\nquery_string &lt;-'\nPREFIX base:        &lt;http://imce.jpl.nasa.gov/foundation/base#&gt;\nPREFIX mission:     &lt;http://imce.jpl.nasa.gov/foundation/mission#&gt;\nPREFIX structure:   &lt;http://opencaesar.io/open-source-rover/vocabulary/structure#&gt;\nPREFIX rdfs:        &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\n\nSELECT DISTINCT ?c1_localname ?c1_name ?c1_type ?c2_localname ?c2_name\nWHERE {\n    ?c1 a mission:Component ;\n      base:hasCanonicalName ?c1_name .\n    OPTIONAL{\n        ?c1 base:isContainedIn ?c2 .\n        OPTIONAL{\n            ?c2 base:hasCanonicalName ?c2_name .\n        }\n    }\n    # Extract the local name\n    BIND(STRAFTER(STR(?c1), \"#\") AS ?c1_localname) .\n    BIND(STRAFTER(STR(?c2), \"#\") AS ?c2_localname) .\n\n    OPTIONAL {\n        ?c1 a structure:System ;\n            BIND(\"structure:System\"  AS ?c1_type) .\n    }    \n    OPTIONAL {\n        ?c1 a structure:Subsystem ;\n            BIND(\"structure:Subsystem\"  AS ?c1_type) .\n    } \n    OPTIONAL {\n        ?c1 a structure:Assembly ;\n            BIND(\"structure:Assembly\"  AS ?c1_type) .\n    } \n}\nORDER BY ?c1_localname \n'\ndf_query &lt;- tansakusuR::send_query(endpoint_url,query_string)\ndatatable(df_query, options = list(pageLength = -1))\n\n\n\n\n\n\n\ndf_query &lt;- df_query %&gt;%\n  filter(df_query$c1_type != \"structure:Part\") %&gt;%\n  arrange(desc(c2_name))\n\n\nplotCollapsibleTreeFromDataframe(df_query, palette=\"BluYl\", parent=\"c2_name\", child=\"c1_name\",type=\"c1_type\")\n\n\n\n\n\n\n\n6.3.2 Some visualization experiments\n\nnetworkD3::simpleNetwork\n\ndf2&lt;- df_query %&gt;% \n  mutate(owner=c2_name) %&gt;%\n  mutate(name=c1_name) %&gt;%\n  select(\"owner\",\"name\") %&gt;%\n  arrange(desc(owner)) %&gt;%  \n  slice(-n())\n\n\nlibrary(networkD3)\n\nnetworkD3::simpleNetwork(df2)\n\n\n\n\n\n\n\nnetworkD3::diagonalNetwor\n\nlibrary(data.tree)\nnd3 &lt;- ToListExplicit(FromDataFrameNetwork(df2), unname = T)\n\nnetworkD3::diagonalNetwork(List = nd3, fontSize = 10, opacity = 0.9)\n\n\n\n\n\n\n\nnetworkD3::radialNetwork\n\nnetworkD3::radialNetwork(nd3, nodeColour=\"seagreen\")"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_parts.html#initialize-oml-file",
    "href": "chapters/02_assembly_parts/create_descriptions_parts.html#initialize-oml-file",
    "title": "6  Create Parts Description",
    "section": "6.1 Initialize OML File",
    "text": "6.1 Initialize OML File\n\noutputdir &lt;- paste0(omlrepo,\"src/oml/opencaesar.io/open-source-rover/description/assembly/\")\n\noutputfile &lt;- paste0(outputdir, \"parts.oml\")\ninit_oml_file &lt;- \n\"description &lt;http://opencaesar.io/open-source-rover/description/assembly/parts#&gt; as parts {\\n}\\n\"\ncat(file=outputfile, init_oml_file)"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_parts.html#modeling-mechanical-parts",
    "href": "chapters/02_assembly_parts/create_descriptions_parts.html#modeling-mechanical-parts",
    "title": "6  Create Parts Description",
    "section": "6.2 Modeling Mechanical Parts",
    "text": "6.2 Modeling Mechanical Parts\n\n6.2.1 Import from github\n\nurl &lt;- \"https://raw.githubusercontent.com/nasa-jpl/open-source-rover/master/parts_list/parts_list.csv\"\ndf_csv &lt;- read.csv(url)\n\n\n\n6.2.2 Tidy Data\n\ncolnames(df_csv) &lt;- c(\"assembly\",\"short name\",\"part number\",\"long name\",\"link\",\"cost\",\"number req in assy\",\"assembly multiplier\")\n\n\n\n6.2.3 These are parts list but its more about a shopping cart list.\nThe list contains “cost”, “number req in assy”, “assembly multiplier”.\n“number req in assy” and “assembly” information are used to create descriptions of parts.\n\ndf_parts_list &lt;- df_csv\n\n# このリストがCSVオリジナル。\n# ここからパーツモデルに変換する場合には、アセンブリ必要数分だけインスタンスを用意する。\n# ではダッシュボードとインスタンスの関係性は？\n# インスタンスの情報にコストを埋め込む？インスタンス数とパーツリストの必要数は必ずしも一致しない\n# これの扱いを考える必要がある。いずれにせよインスタンスはアセンブリで必要とする数だけ必要。\n# アセンブリのインスタンス数✖️\"number req in assy\"がパーツの総数となる。\n\n\ndf_instance_assembly &lt;- data.frame(\n  name = c(\"Body Assembly\", \n           \"Drive Wheel Assembly-1\",\n           \"Drive Wheel Assembly-2\",\n           \"Corner Wheel Assembly-1\",\n           \"Corner Wheel Assembly-2\",\n           \"Corner Wheel Assembly-3\",\n           \"Corner Wheel Assembly-4\",\n           \"Rocker Bogie Suspension Assembly-1\",\n           \"Rocker Bogie Suspension Assembly-2\",\n           \"Mechanical Harness\"),\n  instancename = c(\"body-assembly\",\n                   \"drive-wheel-assembly-1\",\n                   \"drive-wheel-assembly-2\",\n                   \"corner-wheel-assembly-1\",\n                   \"corner-wheel-assembly-2\",\n                   \"corner-wheel-assembly-3\",\n                   \"corner-wheel-assembly-4\",\n                   \"rocker-bogie-suspension-assembly-1\",\n                   \"rocker-bogie-suspension-assembly-2\",\n                   \"mechanical-harness\"\n                  )\n) %&gt;% \n  mutate(type = \"assembly\") %&gt;%\n  mutate(hasDescription = \"\")\n\n\n\n6.2.4 Function to generate structure:Part descriptions\n\ngeneratePartDescriptions &lt;- function(df, header, instancenameindex, index){\n  \n  df_in &lt;- df\n  \n  text &lt;- paste0(\"// \", header, \"\\n\")\n  text_instance &lt;- \"\"\n  text_ref &lt;- paste0(\"\\n\", \"// ref \", header, \"\\n\")\n  id_count &lt;- 1\n  type &lt;- \"structure:Part\"\n  \n  ref_instance &lt;- paste0(\"assembly:\",df_in$hasAssembly[1])\n\n  text_ref &lt;- paste0(text_ref,\n                 \"  ref instance \", ref_instance, \" [\",\"\\n\"\n                 )\n  \n  for (i in 1:nrow(df_in)){\n    for (j in 1:df_in$num[i]) {\n      id &lt;- paste0(index, \".\", formatC(id_count, width = 3, flag=\"0\"))\n      id_count &lt;- id_count + 1\n      instancekey &lt;- paste0(df_in$instancename[i], instancenameindex, \"-\", j)\n      text_instance &lt;- paste0(text_instance,\n                     \"  instance \", instancekey, \" : \", type, \" [\",\"\\n\",\n                     \"      base:hasIdentifier \\\"\", id,\"\\\"\\n\",\n                     \"      base:hasCanonicalName \\\"\",df_in$name[i],\"-\",j,\"\\\"\\n\",\n                     \"      base:hasShortName \\\"\",df_in$name[i],\"-\",j,\"\\\"\\n\",\n                     \"      structure:hasPartsNumber \\\"\",df_in$partsnumber[i],\"\\\"\\n\",\n                     \"  ]\\n\"\n                     )\n      text_ref &lt;- paste0(text_ref,\n               \"        ^structure:hasPart \", instancekey,\"\\n\"\n               )\n    }\n  }\n\n  text_ref &lt;- paste0(text_ref,\n                     \"  ]\\n\\n\"\n                     )\n\n  text &lt;- paste0(text, text_instance, text_ref)\n    \n  return(text)\n}\n\nref instance assembly:body-assembly [\n    ^structure:hasPart 2-hole-flat-beam-2\n]\n\n\n6.2.5 Output OML FILE\n\n#outputdir &lt;- \"~/Workspaces/gitlab/OSR_local/open-source-rover/src/oml/opencaesar.io/open-source-rover/description/assembly/\"\n#outputdir &lt;-\"./open-source-rover/src/oml/opencaesar.io/open-source-rover/description/assembly/\"\n# outputdir &lt;-\"./\"\noutputfile &lt;- paste0(outputdir, \"parts.oml\")"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_parts.html#generate-framework-of-parts.oml",
    "href": "chapters/02_assembly_parts/create_descriptions_parts.html#generate-framework-of-parts.oml",
    "title": "6  Create Parts Description",
    "section": "6.3 Generate framework of parts.oml",
    "text": "6.3 Generate framework of parts.oml\n\nomldescriptions &lt;-\n\"description &lt;http://opencaesar.io/open-source-rover/description/assembly/parts#&gt; as parts {\n\n  uses &lt;http://imce.jpl.nasa.gov/foundation/base#&gt; as base\n  uses &lt;http://opencaesar.io/open-source-rover/vocabulary/structure#&gt; as ^structure\n  extends &lt;http://opencaesar.io/open-source-rover/description/assembly/assembly#&gt; as assembly\n\n\""
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_parts.html#for-body",
    "href": "chapters/02_assembly_parts/create_descriptions_parts.html#for-body",
    "title": "6  Create Parts Description",
    "section": "6.4 For Body",
    "text": "6.4 For Body\n\nkey &lt;- 1\ntargetassembly &lt;- df_instance_assembly$instancename[key]\ndf &lt;- df_parts_list %&gt;% \n  filter(assembly==\"body\") %&gt;%\n  mutate(name = `short name`) %&gt;%\n  mutate(hasAssembly = df_instance_assembly$instancename[1]) %&gt;%\n  mutate(num = as.integer(`number req in assy`)) %&gt;%\n  mutate(partsnumber = `part number`) %&gt;%\n  select(name,hasAssembly,num,partsnumber) %&gt;%\n  mutate(instancename = c(\n    \"120mm-open-gorail\",\n    \"2hole-uchannel\",\n    \"32mm-bearing\",\n    \"32mm-6mm-spacer-2-pack\",\n    \"29-hole-beam\",\n    \"41-hole-beam\",\n    \"12-hole-beam\",\n    \"41-hole-ubeam\",\n    \"7-hole-flat-beam-2pack\",\n    \"dual-block-mount\",\n    \"90deg-threaded-gusset-4pack\",\n    \"50mm-threaded-rod\",\n    \"ball-linkage-2pack\",\n    \"idler-bearing-hub\",\n    \"plastic-hinges\",\n    \"8mm-standoffs\",\n    \"22mm-standoffs\",\n    \"plastic-spacer\",\n    \"3-5-grid-plate\",\n    \"2-hole-flat-beam\")\n  )\n\n\nheader &lt;- c(\"Part - Body\")\npart_instance &lt;- generatePartDescriptions(df, header, instancenameindex=\"\", index=\"P0\")\nomldescriptions &lt;- paste0(omldescriptions, part_instance,\"\\n\")"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_parts.html#for-drive-wheel-assembly-1",
    "href": "chapters/02_assembly_parts/create_descriptions_parts.html#for-drive-wheel-assembly-1",
    "title": "6  Create Parts Description",
    "section": "6.5 For drive-wheel-assembly-1",
    "text": "6.5 For drive-wheel-assembly-1\n\nkey &lt;- 2\ntargetassembly &lt;- df_instance_assembly$instancename[key]\ndf &lt;- df_parts_list %&gt;% \n  filter(assembly==\"drive wheel\") %&gt;%\n  mutate(name = `short name`) %&gt;%\n  mutate(hasAssembly = df_instance_assembly$instancename[key]) %&gt;%\n  mutate(num = as.integer(`number req in assy`)) %&gt;%\n  mutate(partsnumber = `part number`) %&gt;%\n  select(name,hasAssembly,num,partsnumber) %&gt;%\n  mutate(instancename = c(\n    \"wheel\",\n    \"clamping-mount\",\n    \"motor\",\n    \"rex-bore-hub\",\n    \"2-hole-u-channel\")\n  )\nheader &lt;- c(\"Part - drive-wheel-assembly-1\")\npart_instance &lt;- generatePartDescriptions(df, header, instancenameindex=\"-1\", index=\"P1\")\nomldescriptions &lt;- paste0(omldescriptions, part_instance,\"\\n\")"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_parts.html#for-drive-wheel-assembly-2",
    "href": "chapters/02_assembly_parts/create_descriptions_parts.html#for-drive-wheel-assembly-2",
    "title": "6  Create Parts Description",
    "section": "6.6 For drive-wheel-assembly-2",
    "text": "6.6 For drive-wheel-assembly-2\n\nkey &lt;- 3\ntargetassembly &lt;- df_instance_assembly$instancename[key]\ndf &lt;- df_parts_list %&gt;% \n  filter(assembly==\"drive wheel\") %&gt;%\n  mutate(name = `short name`) %&gt;%\n  mutate(hasAssembly = df_instance_assembly$instancename[key]) %&gt;%\n  mutate(num = as.integer(`number req in assy`)) %&gt;%\n  mutate(partsnumber = `part number`) %&gt;%\n  select(name,hasAssembly,num,partsnumber) %&gt;%\n  mutate(instancename = c(\n    \"wheel\",\n    \"clamping-mount\",\n    \"motor\",\n    \"rex-bore-hub\",\n    \"2-hole-u-channel\")\n  )\nheader &lt;- c(\"Part - drive-wheel-assembly-2\")\npart_instance &lt;- generatePartDescriptions(df, header, instancenameindex=\"-2\", index=\"P2\")\nomldescriptions &lt;- paste0(omldescriptions, part_instance,\"\\n\")"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_parts.html#for-corner-wheel-assembly-1234",
    "href": "chapters/02_assembly_parts/create_descriptions_parts.html#for-corner-wheel-assembly-1234",
    "title": "6  Create Parts Description",
    "section": "6.7 For corner-wheel-assembly-1/2/3/4",
    "text": "6.7 For corner-wheel-assembly-1/2/3/4\n\nkey &lt;- 4\nfor(i in 1:4){\n  targetassembly &lt;- df_instance_assembly$instancename[key]\n  df &lt;- df_parts_list %&gt;% \n    filter(assembly %in% c(\"drive wheel\", \"corner\")) %&gt;%\n    mutate(name = `short name`) %&gt;%\n    mutate(hasAssembly = df_instance_assembly$instancename[key]) %&gt;%\n    mutate(num = as.integer(`number req in assy`)) %&gt;%\n    mutate(partsnumber = `part number`) %&gt;%\n    select(name,hasAssembly,num,partsnumber) %&gt;%\n    mutate(instancename = c(\n      \"wheel\",\n      \"clamping-mount\",\n      \"motor\",\n      \"rex-bore-hub\",\n      \"2-hole-u-channel\",\n      \"144mm-gorail\",\n      \"4-hole-u-channel\")\n    )\n  header &lt;- c(paste0(\"Part - \", targetassembly))\n  part_instance &lt;- generatePartDescriptions(df, header, instancenameindex=paste0(\"-\", 2+i), index=paste0(\"P\",2+i))\n  omldescriptions &lt;- paste0(omldescriptions, part_instance,\"\\n\")\n  key &lt;- key + 1\n}"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_parts.html#for-rocker-bogie-suspension-assembly-12",
    "href": "chapters/02_assembly_parts/create_descriptions_parts.html#for-rocker-bogie-suspension-assembly-12",
    "title": "6  Create Parts Description",
    "section": "6.8 For rocker-bogie-suspension-assembly-1/2",
    "text": "6.8 For rocker-bogie-suspension-assembly-1/2\n\nkey &lt;- 8\nfor(i in 1:2){\n  targetassembly &lt;- df_instance_assembly$instancename[key]\n  df &lt;- df_parts_list %&gt;% \n    filter(assembly==\"rocker bogie\") %&gt;%\n    mutate(name = `short name`) %&gt;%\n    mutate(hasAssembly = df_instance_assembly$instancename[key]) %&gt;%\n    mutate(num = as.integer(`number req in assy`)) %&gt;%\n    mutate(partsnumber = `part number`) %&gt;%\n    select(name,hasAssembly,num,partsnumber) %&gt;%\n    mutate(instancename = c(\n      \"1-hole-uchannel\",\n      \"servoblock\",\n      \"servo\",\n      \"8mm-sonic-hub\",\n      \"flanged-bearing-2pack\",\n      \"joint-pattern-spacer\",\n      \"joint-8mm-shaft\",\n      \"joint-3hole-flat-beam-2pack\",\n      \"joint-pattern-mount\",\n      \"steel-flat-bracket\",\n      \"3-5-grid-plate\",\n      \"angle-bracket\",\n      \"96mm-open-gorail\",\n      \"288mm-open-goRail\",\n      \"45deg-bracket\",\n      \"90deg-steel-bracket-2pack\",\n      \"control-arm\",\n      \"8mm-id-spacer-6mm-length\",\n      \"8mm-id-spacer-4mm-length\")\n    )\n  \n  # if number of req is 0.5, we create one part instance.\n  df &lt;- df %&gt;%\n    mutate_at(vars(num), ~ ifelse(. == 0, 1, .))\n\n  \n  header &lt;- c(paste0(\"Part - \", targetassembly))\n  part_instance &lt;- generatePartDescriptions(df, header, instancenameindex=paste0(\"-\", 7+i), index=paste0(\"P\",7+i))\n  omldescriptions &lt;- paste0(omldescriptions, part_instance,\"\\n\")\n  key &lt;- key + 1\n}"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_parts.html#for-mechanical-harness",
    "href": "chapters/02_assembly_parts/create_descriptions_parts.html#for-mechanical-harness",
    "title": "6  Create Parts Description",
    "section": "6.9 For mechanical-harness",
    "text": "6.9 For mechanical-harness\n\ninstancenametext &lt;- c(\n\"hurricane-nuts\",\n\"wire-grommets\",\n\"M4-washers\",\n\"M4-uts\",\n\"M4-locknuts\",\n\"M4-6-button-screws\",\n\"M4-10-button-screws\",\n\"M4-16-button-screws\",\n\"M4-8-socket-screws\",\n\"M4-10-socket-screws\",\n\"M4-12-socket-screws\",\n\"M4-16-socket-screws\",\n\"M4-20-socket-screws\"\n)\n\n  key &lt;- 10\n  targetassembly &lt;- df_instance_assembly$instancename[key]\n  df &lt;- df_parts_list %&gt;% \n    filter(assembly==\"general\") %&gt;%\n    mutate(name = `short name`) %&gt;%\n    mutate(hasAssembly = df_instance_assembly$instancename[key]) %&gt;%\n    mutate(num = as.integer(`number req in assy`)) %&gt;%\n    mutate(partsnumber = `part number`) %&gt;%\n    select(name,hasAssembly,num,partsnumber) %&gt;%\n    mutate(instancename = instancenametext)\n  header &lt;- c(paste0(\"Part - \", targetassembly))\n  part_instance &lt;- generatePartDescriptions(df, header, instancenameindex=paste0(\"-\", 10), index=paste0(\"P\",10))\n  omldescriptions &lt;- paste0(omldescriptions, part_instance,\"\\n\")"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_parts.html#generate-oml-file",
    "href": "chapters/02_assembly_parts/create_descriptions_parts.html#generate-oml-file",
    "title": "6  Create Parts Description",
    "section": "6.10 Generate OML File",
    "text": "6.10 Generate OML File\n\nomldescriptions &lt;- paste0(omldescriptions,\"\\n}\\n\")\ncat(file=outputfile, omldescriptions)"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_parts.html#validate-model",
    "href": "chapters/02_assembly_parts/create_descriptions_parts.html#validate-model",
    "title": "6  Create Parts Description",
    "section": "6.11 Validate Model",
    "text": "6.11 Validate Model\nBefore we check the model, add below codes to the description bundle.\n\n    includes &lt;http://opencaesar.io/open-source-rover/description/assembly/parts#&gt;\n\n\noml_repository &lt;- omlrepo\nomlhashiR::oml_refresh()\n\n[1] \"kill success for pid=43858\"\n\nomlhashiR::oml_stop_Daemon(oml_repository)\n\n[1] \"No Gradle daemons are running.\"\n\nomlhashiR::oml_build(oml_repository)\n\n [1] \"Starting a Gradle Daemon, 6 stopped Daemons could not be reused, use --status for details\"\n [2] \"&gt; Task :omlZip\"                                                                           \n [3] \"&gt; Task :assemble\"                                                                         \n [4] \"&gt; Task :downloadDependencies UP-TO-DATE\"                                                  \n [5] \"&gt; Task :omlToOwl\"                                                                         \n [6] \"&gt; Task :owlReason\"                                                                        \n [7] \"&gt; Task :check\"                                                                            \n [8] \"&gt; Task :build\"                                                                            \n [9] \"\"                                                                                         \n[10] \"BUILD SUCCESSFUL in 12s\"                                                                  \n[11] \"4 actionable tasks: 3 executed, 1 up-to-date\"                                             \n\nomlhashiR::oml_owlLoad(oml_repository)\n\n [1] \"&gt; Task :downloadDependencies UP-TO-DATE\"        \n [2] \"&gt; Task :omlToOwl UP-TO-DATE\"                    \n [3] \"&gt; Task :owlReason UP-TO-DATE\"                   \n [4] \"\"                                               \n [5] \"&gt; Task :startFuseki\"                            \n [6] \"Fuseki server is already running with pid=43879\"\n [7] \"\"                                               \n [8] \"&gt; Task :owlLoad\"                                \n [9] \"\"                                               \n[10] \"BUILD SUCCESSFUL in 5s\"                         \n[11] \"5 actionable tasks: 2 executed, 3 up-to-date\""
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_parts.html#query",
    "href": "chapters/02_assembly_parts/create_descriptions_parts.html#query",
    "title": "6  Create Parts Description",
    "section": "6.12 Query",
    "text": "6.12 Query\n\nlibrary(tansakusuR)\nendpoint_url &lt;- \"http://localhost:3030/open-source-rover/sparql\"\n\n\nquery_string &lt;-'\nPREFIX base:        &lt;http://imce.jpl.nasa.gov/foundation/base#&gt;\nPREFIX mission:     &lt;http://imce.jpl.nasa.gov/foundation/mission#&gt;\nPREFIX structure:   &lt;http://opencaesar.io/open-source-rover/vocabulary/structure#&gt;\nPREFIX rdfs:        &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\n\nSELECT DISTINCT ?c1_localname ?c1_name ?c1_type ?c2_localname ?c2_name\nWHERE {\n    ?c1 a mission:Component ;\n      base:hasCanonicalName ?c1_name .\n    OPTIONAL{\n        ?c1 base:isContainedIn ?c2 .\n        OPTIONAL{\n            ?c2 base:hasCanonicalName ?c2_name .\n        }\n    }\n    # Extract the local name\n    BIND(STRAFTER(STR(?c1), \"#\") AS ?c1_localname) .\n    BIND(STRAFTER(STR(?c2), \"#\") AS ?c2_localname) .\n\n    OPTIONAL {\n        ?c1 a structure:System ;\n            BIND(\"structure:System\"  AS ?c1_type) .\n    }    \n    OPTIONAL {\n        ?c1 a structure:Subsystem ;\n            BIND(\"structure:Subsystem\"  AS ?c1_type) .\n    } \n    OPTIONAL {\n        ?c1 a structure:Assembly ;\n            BIND(\"structure:Assembly\"  AS ?c1_type) .\n    } \n    OPTIONAL {\n        ?c1 a structure:Part ;\n            BIND(\"structure:Part\"  AS ?c1_type) .\n    } \n}\nORDER BY ?c1_localname \n'\ndf_query &lt;- tansakusuR::send_query(endpoint_url,query_string)\ndatatable(df_query, options = list(pageLength = 20))\n\n\n\n\n\n\n\ndf2 &lt;- df_query %&gt;%\n  arrange(desc(c2_name))\n\n\nplotCollapsibleTreeFromDataframe(df2, palette=\"BluYl\", parent=\"c2_name\", child=\"c1_name\",type=\"c1_type\")\n\n\n\n\n\n\ndf2&lt;- df_query %&gt;% \n  mutate(owner=c2_name) %&gt;%\n  mutate(name=c1_name) %&gt;%\n  select(\"owner\",\"name\") %&gt;%\n  arrange(desc(owner)) %&gt;%  \n  slice(-n())\n\n\n\nlibrary(networkD3)\n\nnetworkD3::simpleNetwork(df2)\n\n\n\n\nlibrary(data.tree)\nnd3 &lt;- ToListExplicit(FromDataFrameNetwork(df2), unname = T)\n\nnetworkD3::diagonalNetwork(List = nd3, fontSize = 10, opacity = 0.9)\n\n\n\n\nnetworkD3::radialNetwork(nd3, nodeColour=\"seagreen\")"
  },
  {
    "objectID": "chapters/03_timeline_analysis/usecase_timeline.html#generate-timeline-file-for-modelica",
    "href": "chapters/03_timeline_analysis/usecase_timeline.html#generate-timeline-file-for-modelica",
    "title": "8  Timeline Analysis",
    "section": "8.1 Generate Timeline file for modelica",
    "text": "8.1 Generate Timeline file for modelica\n\ndf_timeline &lt;- df %&gt;% \n  filter(statevariable == \"roverVelocity\") %&gt;%\n  select(time, statevariable, value)\n  \noutputfile &lt;- \"~/Workspaces/openmodelica-docker-start/om-develop/timeline.txt\"\n\ntxt &lt;- \"#1\\n\"\ntxt &lt;- paste0(txt, \"double Tab1(\",nrow(df_timeline),\",2)\\n\")\nfor( i in 1:nrow(df_timeline)){\n  txt &lt;- paste0(txt, df_timeline$time[i],\" \",df_timeline$value[i],\"\\n\")\n}\ncat(file = outputfile, txt)"
  },
  {
    "objectID": "chapters/03_timeline_analysis/usecase_timeline.html#execute-modelica",
    "href": "chapters/03_timeline_analysis/usecase_timeline.html#execute-modelica",
    "title": "8  Timeline Analysis",
    "section": "8.2 Execute Modelica",
    "text": "8.2 Execute Modelica\n\n## need some code"
  },
  {
    "objectID": "chapters/04_massrollup/massrollup.html#summary",
    "href": "chapters/04_massrollup/massrollup.html#summary",
    "title": "9  Mass Roll Up Analysis",
    "section": "9.1 Summary",
    "text": "9.1 Summary"
  },
  {
    "objectID": "chapters/04_massrollup/massrollup.html#methodology",
    "href": "chapters/04_massrollup/massrollup.html#methodology",
    "title": "9  Mass Roll Up Analysis",
    "section": "9.2 Methodology",
    "text": "9.2 Methodology"
  },
  {
    "objectID": "chapters/04_massrollup/massrollup.html#business-questions",
    "href": "chapters/04_massrollup/massrollup.html#business-questions",
    "title": "9  Mass Roll Up Analysis",
    "section": "9.3 Business Questions",
    "text": "9.3 Business Questions\nWhat is total mass of OSR system?"
  },
  {
    "objectID": "chapters/04_massrollup/massrollup.html#vocabulary",
    "href": "chapters/04_massrollup/massrollup.html#vocabulary",
    "title": "9  Mass Roll Up Analysis",
    "section": "9.4 Vocabulary",
    "text": "9.4 Vocabulary"
  },
  {
    "objectID": "chapters/04_massrollup/massrollup.html#descriptions",
    "href": "chapters/04_massrollup/massrollup.html#descriptions",
    "title": "9  Mass Roll Up Analysis",
    "section": "9.5 Descriptions",
    "text": "9.5 Descriptions\n\n9.5.1 Modeling Descriptions Mass Property\nDefine mass property target\n\nsource(\"../../osr_common.R\")\n\n\nlibrary(omlhashiR)\n# oml_repository &lt;- \"../open-source-rover/\"\noml_repository &lt;- omlrepo\nomlhashiR::oml_refresh()\n\n[1] \"kill success for pid=43879\"\n\nomlhashiR::oml_stop_Daemon(oml_repository)\n\n[1] \"Stopping Daemon(s)\" \"1 Daemon stopped\"  \n\nomlhashiR::oml_build(oml_repository)\n\n [1] \"Starting a Gradle Daemon, 7 stopped Daemons could not be reused, use --status for details\"\n [2] \"&gt; Task :omlZip UP-TO-DATE\"                                                                \n [3] \"&gt; Task :assemble UP-TO-DATE\"                                                              \n [4] \"&gt; Task :downloadDependencies UP-TO-DATE\"                                                  \n [5] \"&gt; Task :omlToOwl UP-TO-DATE\"                                                              \n [6] \"&gt; Task :owlReason UP-TO-DATE\"                                                             \n [7] \"&gt; Task :check UP-TO-DATE\"                                                                 \n [8] \"&gt; Task :build UP-TO-DATE\"                                                                 \n [9] \"\"                                                                                         \n[10] \"BUILD SUCCESSFUL in 5s\"                                                                   \n[11] \"4 actionable tasks: 4 up-to-date\"                                                         \n\nomlhashiR::oml_owlLoad(oml_repository)\n\n [1] \"&gt; Task :downloadDependencies UP-TO-DATE\"                                                      \n [2] \"&gt; Task :omlToOwl UP-TO-DATE\"                                                                  \n [3] \"&gt; Task :owlReason UP-TO-DATE\"                                                                 \n [4] \"\"                                                                                             \n [5] \"&gt; Task :startFuseki\"                                                                          \n [6] \"Fuseki server has now successfully started with pid=44503, listening on http://localhost:3030\"\n [7] \"\"                                                                                             \n [8] \"&gt; Task :owlLoad\"                                                                              \n [9] \"\"                                                                                             \n[10] \"BUILD SUCCESSFUL in 8s\"                                                                       \n[11] \"5 actionable tasks: 2 executed, 3 up-to-date\"                                                 \n\n\n\n\n9.5.2 Set endpoint_url\n\nendpoint_url &lt;- \"http://localhost:3030/open-source-rover/sparql\"\n\n\nlibrary(tansakusuR)\nrepo &lt;- \"../../../src/vision/sparql/\"\nfile &lt;- \"component_filtered_withmass.sparql\"\nfilepath &lt;- paste0(repo,file)\n\nshow_query(filepath)\n\nPREFIX base:        &lt;http://imce.jpl.nasa.gov/foundation/base#&gt;\nPREFIX mission:     &lt;http://imce.jpl.nasa.gov/foundation/mission#&gt;\nPREFIX structure:   &lt;http://opencaesar.io/open-source-rover/vocabulary/structure#&gt;\nPREFIX rdfs:        &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\n\nSELECT DISTINCT ?c1_localname ?c1_id ?c1_name ?c1_type ?c2_localname ?c2_id ?c2_name\nWHERE {\n\n    VALUES ?componentType { structure:System structure:Subsystem structure:Assembly }\n\n    ?c1 a ?componentType ;\n        base:hasIdentifier ?c1_id ;\n        base:hasCanonicalName ?c1_name ;\n\n    OPTIONAL{\n        ?c1 base:isContainedIn ?c2 ;\n        OPTIONAL{\n            ?c2 base:hasIdentifier ?c2_id ;\n                base:hasCanonicalName ?c2_name .\n        }\n    }\n    # Extract the local name\n    BIND(STRAFTER(STR(?c1), \"#\") AS ?c1_localname) .\n    BIND(STRAFTER(STR(?c2), \"#\") AS ?c2_localname) .\n\n    OPTIONAL {\n        ?c1 a structure:System ;\n            BIND(\"System\"  AS ?c1_type) .\n    }\n    OPTIONAL {\n        ?c1 a structure:Subsystem ;\n            BIND(\"Subsystem\"  AS ?c1_type) .\n    }\n    OPTIONAL {\n        ?c1 a structure:Assembly ;\n            BIND(\"Assembly\"  AS ?c1_type) .\n    }\n}\nORDER BY ?c1_id\n\ndf &lt;- send_query_from_file(endpoint_url, filepath)\ndatatable(df, options = list(pageLength = -1))"
  },
  {
    "objectID": "chapters/04_massrollup/massrollup.html#analysis",
    "href": "chapters/04_massrollup/massrollup.html#analysis",
    "title": "9  Mass Roll Up Analysis",
    "section": "9.6 Analysis",
    "text": "9.6 Analysis"
  },
  {
    "objectID": "chapters/04_massrollup/massrollup.html#visualize",
    "href": "chapters/04_massrollup/massrollup.html#visualize",
    "title": "9  Mass Roll Up Analysis",
    "section": "9.7 Visualize",
    "text": "9.7 Visualize"
  },
  {
    "objectID": "sparqlwithr.html#run-gradle-task-from-r",
    "href": "sparqlwithr.html#run-gradle-task-from-r",
    "title": "10  OML + Gradle + SPARQL + R",
    "section": "10.1 Run Gradle Task from R",
    "text": "10.1 Run Gradle Task from R\nWe have three options to run gradle tasks.\n\nRun task from your terminal.\nRun task using a system() function with R\nRun Task using a package omlhashiR\n\n\n10.1.1 Run task from your terminal\n\n\n\nFigure 10.2: Run from terminal\n\n\n\ncd ../\n./gradlew owlLoad\n\n&gt; Task :downloadDependencies UP-TO-DATE\n&gt; Task :omlToOwl UP-TO-DATE\n&gt; Task :owlReason UP-TO-DATE\n&gt; Task :startFuseki UP-TO-DATE\n&gt; Task :owlLoad UP-TO-DATE\n\nBUILD SUCCESSFUL in 1s\n5 actionable tasks: 5 up-to-date\n\n\n\n\n10.1.2 Using system command from R\n\noml_repo &lt;- \"../\"\nsprintf(\"cd %s\\n ./gradlew owlLoad\", oml_repo) |&gt;\n  system(intern=TRUE)\n\n[1] \"&gt; Task :downloadDependencies UP-TO-DATE\"\n[2] \"&gt; Task :omlToOwl UP-TO-DATE\"            \n[3] \"&gt; Task :owlReason UP-TO-DATE\"           \n[4] \"&gt; Task :startFuseki UP-TO-DATE\"         \n[5] \"&gt; Task :owlLoad UP-TO-DATE\"             \n[6] \"\"                                       \n[7] \"BUILD SUCCESSFUL in 1s\"                 \n[8] \"5 actionable tasks: 5 up-to-date\"       \n\n\n\n\n10.1.3 Using a package omlhashiR\n\nlibrary(omlhashiR)\n\noml_repository &lt;- \"../\"\nomlhashiR::oml_build(oml_repository)\n\n [1] \"&gt; Task :omlZip UP-TO-DATE\"              \n [2] \"&gt; Task :assemble UP-TO-DATE\"            \n [3] \"&gt; Task :downloadDependencies UP-TO-DATE\"\n [4] \"&gt; Task :omlToOwl UP-TO-DATE\"            \n [5] \"&gt; Task :owlReason UP-TO-DATE\"           \n [6] \"&gt; Task :check UP-TO-DATE\"               \n [7] \"&gt; Task :build UP-TO-DATE\"               \n [8] \"\"                                       \n [9] \"BUILD SUCCESSFUL in 962ms\"              \n[10] \"4 actionable tasks: 4 up-to-date\"       \n\nomlhashiR::oml_owlLoad(oml_repository)\n\n[1] \"&gt; Task :downloadDependencies UP-TO-DATE\"\n[2] \"&gt; Task :omlToOwl UP-TO-DATE\"            \n[3] \"&gt; Task :owlReason UP-TO-DATE\"           \n[4] \"&gt; Task :startFuseki UP-TO-DATE\"         \n[5] \"&gt; Task :owlLoad UP-TO-DATE\"             \n[6] \"\"                                       \n[7] \"BUILD SUCCESSFUL in 1s\"                 \n[8] \"5 actionable tasks: 5 up-to-date\""
  },
  {
    "objectID": "sparqlwithr.html#send-sparql-query-from-r",
    "href": "sparqlwithr.html#send-sparql-query-from-r",
    "title": "10  OML + Gradle + SPARQL + R",
    "section": "10.2 Send SPARQL query from R",
    "text": "10.2 Send SPARQL query from R\n\n10.2.1 Using package “tansakusuR”\n\n# For the first time \nlibrary(devtools)\ninstall_github(\"UTNAK/tansakusuR\")\n\nlibrary(tansakusuR)\n\n\n\n10.2.2 Set endpoint_url\n\nendpoint_url &lt;- \"http://localhost:3030/open-source-rover/sparql\"\n\n\n\n10.2.3 Set SPARQL Query\n\nquery_string &lt;-'\nPREFIX base:        &lt;http://imce.jpl.nasa.gov/foundation/base#&gt;\nPREFIX mission:     &lt;http://imce.jpl.nasa.gov/foundation/mission#&gt;\nPREFIX structure:   &lt;http://opencaesar.io/open-source-rover/vocabulary/structure#&gt;\nPREFIX scenario:   &lt;http://opencaesar.io/open-source-rover/vocabulary/scenario#&gt;\nPREFIX rdfs:        &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\nPREFIX oml:           &lt;http://opencaesar.io/oml#&gt;\n\nSELECT DISTINCT ?manipulate ?f2_id ?f2_cname ?task ?time ?statevariable ?value ?f3_id\nWHERE {\n    ?m a scenario:Manipulates;\n        oml:hasSource ?t ;\n        oml:hasTarget ?s ;\n        scenario:setStateValue ?value ;\n        OPTIONAL{\n            ?t scenario:hasPlannedStartTime ?time .\n            ?t base:hasIdentifier ?f2_id .\n            ?t base:hasCanonicalName ?f2_cname .\n            OPTIONAL{\n            ?t mission:invokes ?f3 .\n            ?f3 base:hasIdentifier ?f3_id .\n        }\n        \n        }\n\n    # Extract the local name\n    BIND(STRAFTER(STR(?m), \"#\") AS ?manipulate) .\n    BIND(STRAFTER(STR(?t), \"#\") AS ?task) .\n    BIND(STRAFTER(STR(?s), \"#\") AS ?statevariable) .\n} \nORDER BY ?m\n'\n\n\n\n10.2.4 Send Query and show results\n\ndata_frame &lt;- send_query(endpoint_url,query_string)\n\nlibrary(DT)\ndatatable(data_frame)\n\n\n\n\n\n\n\n\n10.2.5 Send Query with a .sparql file.\n\nlibrary(tansakusuR)\nrepo &lt;- \"../src/vision/sparql/\"\nfile &lt;- \"component_with_id.sparql\"\nfilepath &lt;- paste0(repo,file)\n\nshow_query(filepath)\n\nPREFIX base:        &lt;http://imce.jpl.nasa.gov/foundation/base#&gt;\nPREFIX mission:     &lt;http://imce.jpl.nasa.gov/foundation/mission#&gt;\nPREFIX structure:   &lt;http://opencaesar.io/open-source-rover/vocabulary/structure#&gt;\nPREFIX rdfs:        &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\n\nSELECT DISTINCT ?c1_localname ?c2_localname ?c2_id ?c2_cname\nWHERE {\n    ?c1 a structure:System ;\n    OPTIONAL{\n        ?c1 structure:hasSubsystem ?c2 .\n        OPTIONAL{\n            ?c2 base:hasIdentifier ?c2_id .\n            ?c2 base:hasCanonicalName ?c2_cname .\n        }\n    }\n    # Extract the local name\n    BIND(STRAFTER(STR(?c1), \"#\") AS ?c1_localname) .\n    BIND(STRAFTER(STR(?c2), \"#\") AS ?c2_localname) .\n\n} \nORDER BY ?c1_localname \n\ndf &lt;- send_query_from_file(endpoint_url, filepath)\ndatatable(df)\n\n\n\n\n\n\nHere is another example.\n\nlibrary(tansakusuR)\nrepo &lt;- \"../src/vision/sparql/\"\nfile &lt;- \"query_scenario_move_v2.sparql\"\nfilepath &lt;- paste0(repo,file)\n\nshow_query(filepath)\n\nPREFIX base:        &lt;http://imce.jpl.nasa.gov/foundation/base#&gt;\nPREFIX mission:     &lt;http://imce.jpl.nasa.gov/foundation/mission#&gt;\nPREFIX structure:   &lt;http://opencaesar.io/open-source-rover/vocabulary/structure#&gt;\nPREFIX scenario:   &lt;http://opencaesar.io/open-source-rover/vocabulary/scenario#&gt;\nPREFIX rdfs:        &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\nPREFIX oml:           &lt;http://opencaesar.io/oml#&gt;\n\nSELECT DISTINCT ?manipulate ?f2_id ?f2_cname ?task ?time ?statevariable ?value ?f3_id\nWHERE {\n    ?m a scenario:Manipulates;\n        oml:hasSource ?t ;\n        oml:hasTarget ?s ;\n        scenario:setStateValue ?value ;\n        OPTIONAL{\n            ?t scenario:hasPlannedStartTime ?time .\n            ?t base:hasIdentifier ?f2_id .\n            ?t base:hasCanonicalName ?f2_cname .\n            OPTIONAL{\n            ?t mission:invokes ?f3 .\n            ?f3 base:hasIdentifier ?f3_id .\n        }\n        \n        }\n\n    # Extract the local name\n    BIND(STRAFTER(STR(?m), \"#\") AS ?manipulate) .\n    BIND(STRAFTER(STR(?t), \"#\") AS ?task) .\n    BIND(STRAFTER(STR(?s), \"#\") AS ?statevariable) .\n} \nORDER BY ?m\n\ndf &lt;- send_query_from_file(endpoint_url, filepath)\ndatatable(df)"
  }
]