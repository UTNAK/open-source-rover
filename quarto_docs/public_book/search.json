[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "OSR System Modeling Platform by OML",
    "section": "",
    "text": "Preface\nThis is a repository for the OSR modeling project."
  },
  {
    "objectID": "index.html#project-summary",
    "href": "index.html#project-summary",
    "title": "OSR System Modeling Platform by OML",
    "section": "Project Summary",
    "text": "Project Summary\nOur goal is to develop a rigorous methodology and tool set for behavior modeling using the Ontological Modeling Language (OML). A particular domain we focus on is that of requirements, architecting, and validation. We use the JPL Open Source Rover(OSR) as a test-bed for prototyping OML vocabularies. The methodology adopts the OpenCAESAR and IMCE vocabularies from JPL."
  },
  {
    "objectID": "index.html#osr-open-source-rover",
    "href": "index.html#osr-open-source-rover",
    "title": "OSR System Modeling Platform by OML",
    "section": "OSR: Open Source Rover",
    "text": "OSR: Open Source Rover\nThe JPL Open Source Rover: OSR is an open source, build it yourself, scaled down version of the 6 wheel rover design that JPL uses to explore the surface of Mars. The Open Source Rover is designed entirely out of consumer off the shelf (COTS) parts. This project is intended to be a teaching and learning experience for those who want to get involved in mechanical engineering, software, electronics, robotics but is also an excellent research platform for rugged terrain. No prior skills or knowledge is required."
  },
  {
    "objectID": "index.html#oml-model-for-osr",
    "href": "index.html#oml-model-for-osr",
    "title": "OSR System Modeling Platform by OML",
    "section": "OML Model for OSR",
    "text": "OML Model for OSR\nA parent repository of OSR OML Model is on github."
  },
  {
    "objectID": "index.html#behavior-modeling",
    "href": "index.html#behavior-modeling",
    "title": "OSR System Modeling Platform by OML",
    "section": "Behavior Modeling",
    "text": "Behavior Modeling\nThe methodology adopts the State Analysis methodology and IMCE vocabularies from JPL."
  },
  {
    "objectID": "chapters/01_basemodel/components.html#summary",
    "href": "chapters/01_basemodel/components.html#summary",
    "title": "1  OSR mission:Component",
    "section": "1.1 Summary",
    "text": "1.1 Summary\nWe described the OSR system structure using IMCE “mission:Component” vocabularies."
  },
  {
    "objectID": "chapters/01_basemodel/components.html#vocabulary",
    "href": "chapters/01_basemodel/components.html#vocabulary",
    "title": "1  OSR mission:Component",
    "section": "1.2 Vocabulary",
    "text": "1.2 Vocabulary\nWe defined the domain specific vocabularies to describe the OSR system decomposition. We defined “System”, “Subsystem” and “Assembly” concepts as a specialization of a mission:Component as shown in Figure 1.1.\n\n\n\nFigure 1.1: Structure Vocabulary\n\n\ncode"
  },
  {
    "objectID": "chapters/01_basemodel/components.html#descriptions",
    "href": "chapters/01_basemodel/components.html#descriptions",
    "title": "1  OSR mission:Component",
    "section": "1.3 Descriptions",
    "text": "1.3 Descriptions\n\n\n\nFigure 1.2: OSR System Decomposition"
  },
  {
    "objectID": "chapters/01_basemodel/components.html#analysis",
    "href": "chapters/01_basemodel/components.html#analysis",
    "title": "1  OSR mission:Component",
    "section": "1.4 Analysis",
    "text": "1.4 Analysis\nWe analyze the hierarchical structure of the mission:Component.\n\n1.4.1 SPARQL Query for “Component contains Component”\ncomponent.sparql\n\nPREFIX base:        &lt;http://imce.jpl.nasa.gov/foundation/base#&gt;\nPREFIX mission:     &lt;http://imce.jpl.nasa.gov/foundation/mission#&gt;\nPREFIX structure:   &lt;http://opencaesar.io/open-source-rover/vocabulary/structure#&gt;\nPREFIX rdfs:        &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\n\nSELECT DISTINCT ?c1_localname ?c1_id ?c1_name ?c1_type ?c2_localname ?c2_id ?c2_name\nWHERE {\n    ?c1 a mission:Component ;\n        base:hasIdentifier ?c1_id ;\n        base:hasCanonicalName ?c1_name ;\n\n    OPTIONAL{\n        ?c1 base:isContainedIn ?c2 ;\n        OPTIONAL{\n            ?c2 base:hasIdentifier ?c2_id ;\n                base:hasCanonicalName ?c2_name .\n        }\n    }\n    # Extract the local name\n    BIND(STRAFTER(STR(?c1), \"#\") AS ?c1_localname) .\n    BIND(STRAFTER(STR(?c2), \"#\") AS ?c2_localname) .\n\n    OPTIONAL {\n        ?c1 a structure:System ;\n            BIND(\"System\"  AS ?c1_type) .\n    }\n    OPTIONAL {\n        ?c1 a structure:Subsystem ;\n            BIND(\"Subsystem\"  AS ?c1_type) .\n    }\n\n}\nORDER BY ?c1_id\n\n\n1.4.2 Read JSON file of Query Results\n\nomlrepo &lt;- \"../../../../open-source-rover/\"\n\n# output dir for owlQuery specified at resultPath in build.gradle\nrepo &lt;- paste0(omlrepo, \"build/results/\")\nfile &lt;- \"component.json\"\nfilepath &lt;- paste0(repo,file)\ndf &lt;- readQueryResultsFromJson(filepath)\ndf &lt;- df %&gt;%\n  filter(c1_type %in% c(\"System\",\"Subsystem\"))\n\n\ndatatable(df)"
  },
  {
    "objectID": "chapters/01_basemodel/components.html#visualize",
    "href": "chapters/01_basemodel/components.html#visualize",
    "title": "1  OSR mission:Component",
    "section": "1.5 Visualize",
    "text": "1.5 Visualize\nNow we visualize data as a tree structure.\n\n# Specify data as a form of parent and child\ndf_vis &lt;- df %&gt;%\n  mutate(owner = paste(c2_id, c2_name),\n         name = paste(c1_id, c1_name)) %&gt;%\n  select(owner,name,c1_type)\n\n# NA for root in the first column\ndf_vis$owner[1] &lt;- c(NA)\n\n# This tooltip is shown when hovering on a node of a tree diagram\ndf_vis$tooltip &lt;- paste0(\n  \"type: \",\n  df_vis$type,\n  \"&lt;br&gt;name: \",\n  df_vis$name\n  )\n\n# Using reusable function to produce interactive tree diagrams\nplotCollapsibleTreeFromDataframe(df_vis, palette=\"BluYl\", \n                                 parent = \"owner\", child = \"name\", types = \"c1_type\",\n                                 tooltips = \"tooltip\")\n\n\n\n\nFigure 1.3: A tree diagram"
  },
  {
    "objectID": "chapters/01_basemodel/requirements.html#summary",
    "href": "chapters/01_basemodel/requirements.html#summary",
    "title": "2  OSR mission:Requirement",
    "section": "2.1 Summary",
    "text": "2.1 Summary"
  },
  {
    "objectID": "chapters/01_basemodel/requirements.html#vocabulary",
    "href": "chapters/01_basemodel/requirements.html#vocabulary",
    "title": "2  OSR mission:Requirement",
    "section": "2.2 Vocabulary",
    "text": "2.2 Vocabulary"
  },
  {
    "objectID": "chapters/01_basemodel/requirements.html#descriptions",
    "href": "chapters/01_basemodel/requirements.html#descriptions",
    "title": "2  OSR mission:Requirement",
    "section": "2.3 Descriptions",
    "text": "2.3 Descriptions"
  },
  {
    "objectID": "chapters/01_basemodel/requirements.html#analysis",
    "href": "chapters/01_basemodel/requirements.html#analysis",
    "title": "2  OSR mission:Requirement",
    "section": "2.4 Analysis",
    "text": "2.4 Analysis"
  },
  {
    "objectID": "chapters/01_basemodel/requirements.html#visualize",
    "href": "chapters/01_basemodel/requirements.html#visualize",
    "title": "2  OSR mission:Requirement",
    "section": "2.5 Visualize",
    "text": "2.5 Visualize"
  },
  {
    "objectID": "chapters/01_basemodel/functions.html#summary",
    "href": "chapters/01_basemodel/functions.html#summary",
    "title": "3  OSR mission:Function",
    "section": "3.1 Summary",
    "text": "3.1 Summary"
  },
  {
    "objectID": "chapters/01_basemodel/functions.html#vocabulary",
    "href": "chapters/01_basemodel/functions.html#vocabulary",
    "title": "3  OSR mission:Function",
    "section": "3.2 Vocabulary",
    "text": "3.2 Vocabulary"
  },
  {
    "objectID": "chapters/01_basemodel/functions.html#descriptions",
    "href": "chapters/01_basemodel/functions.html#descriptions",
    "title": "3  OSR mission:Function",
    "section": "3.3 Descriptions",
    "text": "3.3 Descriptions"
  },
  {
    "objectID": "chapters/01_basemodel/functions.html#analysis",
    "href": "chapters/01_basemodel/functions.html#analysis",
    "title": "3  OSR mission:Function",
    "section": "3.4 Analysis",
    "text": "3.4 Analysis"
  },
  {
    "objectID": "chapters/01_basemodel/functions.html#visualize",
    "href": "chapters/01_basemodel/functions.html#visualize",
    "title": "3  OSR mission:Function",
    "section": "3.5 Visualize",
    "text": "3.5 Visualize"
  },
  {
    "objectID": "chapters/02_assembly_parts/assemblyandparts.html#summary",
    "href": "chapters/02_assembly_parts/assemblyandparts.html#summary",
    "title": "4  OSR structure:Assembly and structure:Part",
    "section": "4.1 Summary",
    "text": "4.1 Summary\nThis is a demonstration of vocabulary concept for the component dashboard.\n\nDashboard Prototype"
  },
  {
    "objectID": "chapters/02_assembly_parts/assemblyandparts.html#methodology",
    "href": "chapters/02_assembly_parts/assemblyandparts.html#methodology",
    "title": "4  OSR structure:Assembly and structure:Part",
    "section": "4.2 Methodology",
    "text": "4.2 Methodology\n\n\n\nMethodology"
  },
  {
    "objectID": "chapters/02_assembly_parts/assemblyandparts.html#business-questions",
    "href": "chapters/02_assembly_parts/assemblyandparts.html#business-questions",
    "title": "4  OSR structure:Assembly and structure:Part",
    "section": "4.3 Business Questions",
    "text": "4.3 Business Questions"
  },
  {
    "objectID": "chapters/02_assembly_parts/assemblyandparts.html#vocabulary",
    "href": "chapters/02_assembly_parts/assemblyandparts.html#vocabulary",
    "title": "4  OSR structure:Assembly and structure:Part",
    "section": "4.4 Vocabulary",
    "text": "4.4 Vocabulary"
  },
  {
    "objectID": "chapters/02_assembly_parts/assemblyandparts.html#descriptions",
    "href": "chapters/02_assembly_parts/assemblyandparts.html#descriptions",
    "title": "4  OSR structure:Assembly and structure:Part",
    "section": "4.5 Descriptions",
    "text": "4.5 Descriptions"
  },
  {
    "objectID": "chapters/02_assembly_parts/assemblyandparts.html#analysis",
    "href": "chapters/02_assembly_parts/assemblyandparts.html#analysis",
    "title": "4  OSR structure:Assembly and structure:Part",
    "section": "4.6 Analysis",
    "text": "4.6 Analysis"
  },
  {
    "objectID": "chapters/02_assembly_parts/assemblyandparts.html#visualize",
    "href": "chapters/02_assembly_parts/assemblyandparts.html#visualize",
    "title": "4  OSR structure:Assembly and structure:Part",
    "section": "4.7 Visualize",
    "text": "4.7 Visualize"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_assembly.html",
    "href": "chapters/02_assembly_parts/create_descriptions_assembly.html",
    "title": "5  Create Assembly Description",
    "section": "",
    "text": "6 relation to Subsystem\nref_instance &lt;- generateSubsystemRefDescriptions(df_instance_assembly)\n\ncat(ref_instance)\n\n//ref to Subsystem\n    ref instance subsystems:MechanicalSubsystem [\n        ^structure:hasAssembly body-assembly\n        ^structure:hasAssembly rocker-bogie-suspension-assembly-1\n        ^structure:hasAssembly rocker-bogie-suspension-assembly-2\n        ^structure:hasAssembly mechanical-harness\n    ]\n\n    ref instance subsystems:MobilitySubsystem [\n        ^structure:hasAssembly drive-wheel-assembly-1\n        ^structure:hasAssembly drive-wheel-assembly-2\n        ^structure:hasAssembly corner-wheel-assembly-1\n        ^structure:hasAssembly corner-wheel-assembly-2\n        ^structure:hasAssembly corner-wheel-assembly-3\n        ^structure:hasAssembly corner-wheel-assembly-4\n    ]\n\nomldescriptions &lt;- paste0(omldescriptions, ref_instance,\"\\n\")"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_assembly.html#initialize-oml-file",
    "href": "chapters/02_assembly_parts/create_descriptions_assembly.html#initialize-oml-file",
    "title": "5  Create Assembly Description",
    "section": "5.1 Initialize OML File",
    "text": "5.1 Initialize OML File\n\noutputdir &lt;- paste0(omlrepo,\"src/oml/opencaesar.io/open-source-rover/description/assembly/\")\n\noutputfile &lt;- paste0(outputdir, \"assembly.oml\")\ninit_oml_file &lt;- \n\"description &lt;http://opencaesar.io/open-source-rover/description/assembly/assembly#&gt; as assembly {\\n}\\n\"\ncat(file=outputfile, init_oml_file)\n\n\noutputfile &lt;- paste0(outputdir, \"parts.oml\")\ninit_oml_file &lt;- \n\"description &lt;http://opencaesar.io/open-source-rover/description/assembly/parts#&gt; as parts {\\n}\\n\"\ncat(file=outputfile, init_oml_file)"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_assembly.html#modeling-mechanical-assembly",
    "href": "chapters/02_assembly_parts/create_descriptions_assembly.html#modeling-mechanical-assembly",
    "title": "5  Create Assembly Description",
    "section": "5.2 Modeling Mechanical Assembly",
    "text": "5.2 Modeling Mechanical Assembly\n“Assembly” descriptions are created from parts_list\n\n5.2.1 Import from github\n\nurl &lt;- \"https://raw.githubusercontent.com/nasa-jpl/open-source-rover/master/parts_list/parts_list.csv\"\ndf_csv &lt;- read.csv(url)\n\n\n\n5.2.2 Tidy Data\n\ncolnames(df_csv) &lt;- c(\"assembly\",\"short name\",\"part number\",\"long name\",\"link\",\"cost\",\"number req in assy\",\"assembly multiplier\")\n\n\n\n5.2.3 Explore Data\n\nParts\nIn parts list, we can observe duplicated parts as follows.\n\ndf_csv %&gt;% \n  group_by(`part number`) %&gt;%\n  filter(n()&gt;1) %&gt;%\n  arrange(`part number`)\n\n# A tibble: 4 × 8\n# Groups:   part number [2]\n  assembly     `short name`     `part number`  `long name`           link  cost \n  &lt;chr&gt;        &lt;chr&gt;            &lt;chr&gt;          &lt;chr&gt;                 &lt;chr&gt; &lt;chr&gt;\n1 rocker bogie 3x5 grid plate   1116-0024-0040 1116 Series Grid Pla… http… $1.29\n2 body         3x5 grid plate   1116-0024-0040 1116 Series Grid Pla… http… $1.29\n3 drive wheel  2 Hole U channel 1120-0002-0072 1120 Series U-Channe… http… $4.99\n4 body         2 Hole U channel 1120-0002-0072 1120 Series U-Channe… http… $4.99\n# ℹ 2 more variables: `number req in assy` &lt;dbl&gt;, `assembly multiplier` &lt;int&gt;\n\n\nThe part numbers are the same, but the part names and properties are slightly different.\n\n\nAssembly\n\nunique(df_csv$assembly)\n\n[1] \"drive wheel\"  \"corner\"       \"rocker bogie\" \"body\"         \"general\"     \n\n\nData is grouped by “assembly”.\n\ndrive wheel\ncorner\nrocker bogie\nbody\ngeneral\n\nThis means An \"Assembly\" has \"Part\"s.\nSo we will add structure:Part and structure:Assembly as a specialization of mission:Component to our oml model.\na structure:Subsystem has a structure:Assembly.\na structure:Assembly has a structure:Part.\nThe updated model is shown below.\n\nvocabulary &lt;http://opencaesar.io/open-source-rover/vocabulary/structure#&gt; as ^structure {\n\n    extends &lt;http://imce.jpl.nasa.gov/foundation/mission#&gt; as mission\n\n    extends &lt;http://imce.jpl.nasa.gov/foundation/base#&gt; as base\n\n    concept System &lt; mission:Component\n\n    concept Subsystem &lt; mission:Component\n\n    relation hasSubsystem [\n        from System\n        to Subsystem\n    ] &lt; base:contains\n\n    concept Assembly &lt; mission:Component\n    \n    relation hasAssembly [\n        from Subsystem\n        to Assembly\n    ] &lt; base:contains\n\n    concept Part &lt; mission:Component\n    \n    relation hasPart [\n        from Assembly\n        to Part\n    ] &lt; base:contains\n\n\n}\n\nOnce we add new vocabulary, let’s check the consistency of our model using owlReason.\n\nlibrary(omlhashiR)\n# oml_repository &lt;- \"../open-source-rover/\"\noml_repository &lt;- omlrepo\nomlhashiR::oml_refresh()\n\n[1] \"kill success for pid=41589\"\n\nomlhashiR::oml_stop_Daemon(oml_repository)\n\n[1] \"Stopping Daemon(s)\" \"1 Daemon stopped\"  \n\nomlhashiR::oml_build(oml_repository)\n\n [1] \"Starting a Gradle Daemon, 5 stopped Daemons could not be reused, use --status for details\"\n [2] \"&gt; Task :omlZip UP-TO-DATE\"                                                                \n [3] \"&gt; Task :assemble UP-TO-DATE\"                                                              \n [4] \"&gt; Task :downloadDependencies UP-TO-DATE\"                                                  \n [5] \"&gt; Task :omlToOwl UP-TO-DATE\"                                                              \n [6] \"&gt; Task :owlReason UP-TO-DATE\"                                                             \n [7] \"&gt; Task :check UP-TO-DATE\"                                                                 \n [8] \"&gt; Task :build UP-TO-DATE\"                                                                 \n [9] \"\"                                                                                         \n[10] \"BUILD SUCCESSFUL in 5s\"                                                                   \n[11] \"4 actionable tasks: 4 up-to-date\"                                                         \n\nomlhashiR::oml_owlLoad(oml_repository)\n\n [1] \"&gt; Task :downloadDependencies UP-TO-DATE\"                                                      \n [2] \"&gt; Task :omlToOwl UP-TO-DATE\"                                                                  \n [3] \"&gt; Task :owlReason UP-TO-DATE\"                                                                 \n [4] \"\"                                                                                             \n [5] \"&gt; Task :startFuseki\"                                                                          \n [6] \"Fuseki server has now successfully started with pid=43879, listening on http://localhost:3030\"\n [7] \"\"                                                                                             \n [8] \"&gt; Task :owlLoad\"                                                                              \n [9] \"\"                                                                                             \n[10] \"BUILD SUCCESSFUL in 8s\"                                                                       \n[11] \"5 actionable tasks: 2 executed, 3 up-to-date\"                                                 \n\n\n\n\n\n5.2.4 Modeling assembly data\nThe descriptions of assemblies between parts_list and CAD model are different.\n\n\n\n\n\nOSR CAD Model\n\n\n\n\nWe chose assembly definitions from the CAD model.\nBelow assembly data is a description for structure:Assemblyin OML model.\n\ndf_instance_assembly &lt;- data.frame(\n  name = c(\"Body Assembly\", \n           \"Drive Wheel Assembly-1\",\n           \"Drive Wheel Assembly-2\",\n           \"Corner Wheel Assembly-1\",\n           \"Corner Wheel Assembly-2\",\n           \"Corner Wheel Assembly-3\",\n           \"Corner Wheel Assembly-4\",\n           \"Rocker Bogie Suspension Assembly-1\",\n           \"Rocker Bogie Suspension Assembly-2\",\n           \"Mechanical Harness\"),\n  instancename = c(\"body-assembly\",\n                   \"drive-wheel-assembly-1\",\n                   \"drive-wheel-assembly-2\",\n                   \"corner-wheel-assembly-1\",\n                   \"corner-wheel-assembly-2\",\n                   \"corner-wheel-assembly-3\",\n                   \"corner-wheel-assembly-4\",\n                   \"rocker-bogie-suspension-assembly-1\",\n                   \"rocker-bogie-suspension-assembly-2\",\n                   \"mechanical-harness\"\n                  )\n) %&gt;% \n  mutate(type = \"assembly\") %&gt;%\n  mutate(hasDescription = \"\")\n\n\n\n5.2.5 Add relationship to subsystem\nWe define the relationship between assemblies and subsystems as follows.\n\ndf_instance_assembly &lt;- df_instance_assembly %&gt;%\n  mutate(ownedSubsystem =c(\"subsystems:MechanicalSubsystem\",\n                           \"subsystems:MobilitySubsystem\",\n                           \"subsystems:MobilitySubsystem\",\n                           \"subsystems:MobilitySubsystem\",\n                           \"subsystems:MobilitySubsystem\",\n                           \"subsystems:MobilitySubsystem\",\n                           \"subsystems:MobilitySubsystem\",\n                           \"subsystems:MechanicalSubsystem\",\n                           \"subsystems:MechanicalSubsystem\",\n                           \"subsystems:MechanicalSubsystem\"\n                           )\n         )\n\n\n\n5.2.6 Add descriptions to assembly\n\nRocker-Bogie Suspension\n\ntext &lt;- \"The Rocker-Bogie is the suspension system that enables the rover to climb aggressive obstacles. The design allows all 6 wheels to be in contact with the ground as much as possible, increasing traction. The suspension system on a typical consumer vehicle can traverse obstacles about half the height of one wheel; the Rocker-Bogie suspension system can traverse obstacles over 2 times the height of the wheel.\"\n\ndf_instance_assembly$hasDescription[df_instance_assembly$name==\"Rocker Bogie Suspension Assembly-1\"] &lt;- text\ndf_instance_assembly$hasDescription[df_instance_assembly$name==\"Rocker Bogie Suspension Assembly-2\"] &lt;- text\n\n\n\n\n5.2.7 Function to generate instance descriptions.\n\ngenerateAssemblyDescriptions &lt;- function(df){\n  \n  df_in &lt;- df\n  \n  text &lt;- paste0(\"// Assembly Instances\\n\")\n  text_instance &lt;- \"\"\n\n  for (i in 1:nrow(df_in)){\n    id &lt;- paste0(\"A\", \".\", formatC(i, width = 2, flag=\"0\"))\n    type &lt;- \"structure:Assembly\"\n    text_instance &lt;- paste0(text_instance,\n                   \"    instance \", df_in$instancename[i], \" : \", type, \" [\",\"\\n\",\n                   \"        base:hasIdentifier \\\"\", id,\"\\\"\\n\",\n                   \"        base:hasCanonicalName \\\"\",df_in$name[i],\"\\\"\\n\",\n                   \"        base:hasShortName \\\"\",df_in$name[i],\"\\\"\\n\",\n                   \"        base:hasDescription \\\"\",df_in$hasDescription[i],\"\\\"\\n\",\n                   \"    ]\\n\"\n                   )\n  }\n\n  text &lt;- paste0(text, text_instance)\n  return(text)\n}\n\n\n\n5.2.8 Function to generate reference instance descriptions.\nThis function generates ref instance following below pattern.\n    ref instance subsystems:MechanicalSubsystem [\n        ^structure:hasAssembly body-assembly\n    ]\n\ngenerateSubsystemRefDescriptions &lt;- function(df){\n\n  # df &lt;- df_instance_assembly # for debug\n  \n  subsystem &lt;- as.list(unique(df$ownedSubsystem))\n  \n  text &lt;- paste0(\"//ref to Subsystem\",\"\\n\")\n  text_ref &lt;- \"\"\n  \n  for(j in 1:length(subsystem)){\n    ref_instance &lt;- subsystem[j]\n    df_instance &lt;- df %&gt;%\n      filter(df$ownedSubsystem == ref_instance)\n    \n    text_ref &lt;- paste0(text_ref,\n                   \"    ref instance \", ref_instance, \" [\",\"\\n\"\n                   )\n    \n    for (i in 1:nrow(df_instance)){\n      text_ref &lt;- paste0(text_ref,\n                     \"      ^structure:hasAssembly \", df_instance$instancename[i],\"\\n\"\n                     )\n    }\n    text_ref &lt;- paste0(text_ref,\n                       \"    ]\\n\\n\"\n                       )\n    \n  }\n  \n  text &lt;- paste0(text, text_ref)\n  \n  return(text)\n}   \n\n\n\n5.2.9 Output OML FILE\n\n# outputdir &lt;- \"~/Workspaces/gitlab/OSR_local/open-source-rover/src/oml/opencaesar.io/open-source-rover/description/assembly/\"\n#outputdir &lt;-\"./open-source-rover/src/oml/opencaesar.io/open-source-rover/description/assembly/\"\n# outputdir &lt;-\"./\"\noutputfile &lt;- paste0(outputdir, \"assembly.oml\")\n\nassemly.omlのフレーム作成\n\nomldescriptions &lt;-\n\"description &lt;http://opencaesar.io/open-source-rover/description/assembly/assembly#&gt; as assembly {\n    \n    uses &lt;http://imce.jpl.nasa.gov/foundation/base#&gt; as base\n    uses &lt;http://opencaesar.io/open-source-rover/vocabulary/structure#&gt; as ^structure\n\n  extends &lt;http://opencaesar.io/open-source-rover/description/structure/subsystems#&gt; as subsystems\n  \n\"\n\n\n\n5.2.10 Assembly Instances : OK\n\ninstance &lt;- generateAssemblyDescriptions(df_instance_assembly)\n\n# cat(instance)\nomldescriptions &lt;- paste0(omldescriptions, instance,\"\\n\")"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_assembly.html#generate-oml-file",
    "href": "chapters/02_assembly_parts/create_descriptions_assembly.html#generate-oml-file",
    "title": "5  Create Assembly Description",
    "section": "6.1 Generate OML File",
    "text": "6.1 Generate OML File\n\nomldescriptions &lt;- paste0(omldescriptions,\"\\n}\\n\")\ncat(file=outputfile, omldescriptions)"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_assembly.html#validate-model",
    "href": "chapters/02_assembly_parts/create_descriptions_assembly.html#validate-model",
    "title": "5  Create Assembly Description",
    "section": "6.2 Validate Model",
    "text": "6.2 Validate Model\nBefore we check the model, add below codes to the description bundle.\n\n    includes &lt;http://opencaesar.io/open-source-rover/description/assembly/assembly#&gt;\n\n\nomlhashiR::oml_build(oml_repository)\n\n [1] \"&gt; Task :omlZip\"                              \n [2] \"&gt; Task :assemble\"                            \n [3] \"&gt; Task :downloadDependencies UP-TO-DATE\"     \n [4] \"&gt; Task :omlToOwl\"                            \n [5] \"&gt; Task :owlReason\"                           \n [6] \"&gt; Task :check\"                               \n [7] \"&gt; Task :build\"                               \n [8] \"\"                                            \n [9] \"BUILD SUCCESSFUL in 6s\"                      \n[10] \"4 actionable tasks: 3 executed, 1 up-to-date\"\n\nomlhashiR::oml_owlLoad(oml_repository)\n\n[1] \"&gt; Task :downloadDependencies UP-TO-DATE\"     \n[2] \"&gt; Task :omlToOwl UP-TO-DATE\"                 \n[3] \"&gt; Task :owlReason UP-TO-DATE\"                \n[4] \"&gt; Task :startFuseki UP-TO-DATE\"              \n[5] \"&gt; Task :owlLoad\"                             \n[6] \"\"                                            \n[7] \"BUILD SUCCESSFUL in 3s\"                      \n[8] \"5 actionable tasks: 1 executed, 4 up-to-date\""
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_assembly.html#query",
    "href": "chapters/02_assembly_parts/create_descriptions_assembly.html#query",
    "title": "5  Create Assembly Description",
    "section": "6.3 Query",
    "text": "6.3 Query\n\nlibrary(tansakusuR)\nendpoint_url &lt;- \"http://localhost:3030/open-source-rover/sparql\"\n\n\n6.3.1 Extract mission:Component Hierarchy\n\nquery_string &lt;-'\nPREFIX base:        &lt;http://imce.jpl.nasa.gov/foundation/base#&gt;\nPREFIX mission:     &lt;http://imce.jpl.nasa.gov/foundation/mission#&gt;\nPREFIX structure:   &lt;http://opencaesar.io/open-source-rover/vocabulary/structure#&gt;\nPREFIX rdfs:        &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\n\nSELECT DISTINCT ?c1_localname ?c1_name ?c1_type ?c2_localname ?c2_name\nWHERE {\n    ?c1 a mission:Component ;\n      base:hasCanonicalName ?c1_name .\n    OPTIONAL{\n        ?c1 base:isContainedIn ?c2 .\n        OPTIONAL{\n            ?c2 base:hasCanonicalName ?c2_name .\n        }\n    }\n    # Extract the local name\n    BIND(STRAFTER(STR(?c1), \"#\") AS ?c1_localname) .\n    BIND(STRAFTER(STR(?c2), \"#\") AS ?c2_localname) .\n\n    OPTIONAL {\n        ?c1 a structure:System ;\n            BIND(\"structure:System\"  AS ?c1_type) .\n    }    \n    OPTIONAL {\n        ?c1 a structure:Subsystem ;\n            BIND(\"structure:Subsystem\"  AS ?c1_type) .\n    } \n    OPTIONAL {\n        ?c1 a structure:Assembly ;\n            BIND(\"structure:Assembly\"  AS ?c1_type) .\n    } \n}\nORDER BY ?c1_localname \n'\ndf_query &lt;- tansakusuR::send_query(endpoint_url,query_string)\ndatatable(df_query, options = list(pageLength = -1))\n\n\n\n\n\n\n\ndf_query &lt;- df_query %&gt;%\n  filter(df_query$c1_type != \"structure:Part\") %&gt;%\n  arrange(desc(c2_name))\n\n\nplotCollapsibleTreeFromDataframe(df_query, palette=\"BluYl\", parent=\"c2_name\", child=\"c1_name\",type=\"c1_type\")\n\n\n\n\n\n\n\n6.3.2 Some visualization experiments\n\nnetworkD3::simpleNetwork\n\ndf2&lt;- df_query %&gt;% \n  mutate(owner=c2_name) %&gt;%\n  mutate(name=c1_name) %&gt;%\n  select(\"owner\",\"name\") %&gt;%\n  arrange(desc(owner)) %&gt;%  \n  slice(-n())\n\n\nlibrary(networkD3)\n\nnetworkD3::simpleNetwork(df2)\n\n\n\n\n\n\n\nnetworkD3::diagonalNetwor\n\nlibrary(data.tree)\nnd3 &lt;- ToListExplicit(FromDataFrameNetwork(df2), unname = T)\n\nnetworkD3::diagonalNetwork(List = nd3, fontSize = 10, opacity = 0.9)\n\n\n\n\n\n\n\nnetworkD3::radialNetwork\n\nnetworkD3::radialNetwork(nd3, nodeColour=\"seagreen\")"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_parts.html#initialize-oml-file",
    "href": "chapters/02_assembly_parts/create_descriptions_parts.html#initialize-oml-file",
    "title": "6  Create Parts Description",
    "section": "6.1 Initialize OML File",
    "text": "6.1 Initialize OML File\n\noutputdir &lt;- paste0(omlrepo,\"src/oml/opencaesar.io/open-source-rover/description/assembly/\")\n\noutputfile &lt;- paste0(outputdir, \"parts.oml\")\ninit_oml_file &lt;- \n\"description &lt;http://opencaesar.io/open-source-rover/description/assembly/parts#&gt; as parts {\\n}\\n\"\ncat(file=outputfile, init_oml_file)"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_parts.html#modeling-mechanical-parts",
    "href": "chapters/02_assembly_parts/create_descriptions_parts.html#modeling-mechanical-parts",
    "title": "6  Create Parts Description",
    "section": "6.2 Modeling Mechanical Parts",
    "text": "6.2 Modeling Mechanical Parts\n\n6.2.1 Import from github\n\nurl &lt;- \"https://raw.githubusercontent.com/nasa-jpl/open-source-rover/master/parts_list/parts_list.csv\"\ndf_csv &lt;- read.csv(url)\n\n\n\n6.2.2 Tidy Data\n\ncolnames(df_csv) &lt;- c(\"assembly\",\"short name\",\"part number\",\"long name\",\"link\",\"cost\",\"number req in assy\",\"assembly multiplier\")\n\n\n\n6.2.3 These are parts list but its more about a shopping cart list.\nThe list contains “cost”, “number req in assy”, “assembly multiplier”.\n“number req in assy” and “assembly” information are used to create descriptions of parts.\n\ndf_parts_list &lt;- df_csv\n\n# このリストがCSVオリジナル。\n# ここからパーツモデルに変換する場合には、アセンブリ必要数分だけインスタンスを用意する。\n# ではダッシュボードとインスタンスの関係性は？\n# インスタンスの情報にコストを埋め込む？インスタンス数とパーツリストの必要数は必ずしも一致しない\n# これの扱いを考える必要がある。いずれにせよインスタンスはアセンブリで必要とする数だけ必要。\n# アセンブリのインスタンス数✖️\"number req in assy\"がパーツの総数となる。\n\n\ndf_instance_assembly &lt;- data.frame(\n  name = c(\"Body Assembly\", \n           \"Drive Wheel Assembly-1\",\n           \"Drive Wheel Assembly-2\",\n           \"Corner Wheel Assembly-1\",\n           \"Corner Wheel Assembly-2\",\n           \"Corner Wheel Assembly-3\",\n           \"Corner Wheel Assembly-4\",\n           \"Rocker Bogie Suspension Assembly-1\",\n           \"Rocker Bogie Suspension Assembly-2\",\n           \"Mechanical Harness\"),\n  instancename = c(\"body-assembly\",\n                   \"drive-wheel-assembly-1\",\n                   \"drive-wheel-assembly-2\",\n                   \"corner-wheel-assembly-1\",\n                   \"corner-wheel-assembly-2\",\n                   \"corner-wheel-assembly-3\",\n                   \"corner-wheel-assembly-4\",\n                   \"rocker-bogie-suspension-assembly-1\",\n                   \"rocker-bogie-suspension-assembly-2\",\n                   \"mechanical-harness\"\n                  )\n) %&gt;% \n  mutate(type = \"assembly\") %&gt;%\n  mutate(hasDescription = \"\")\n\n\n\n6.2.4 Function to generate structure:Part descriptions\n\ngeneratePartDescriptions &lt;- function(df, header, instancenameindex, index){\n  \n  df_in &lt;- df\n  \n  text &lt;- paste0(\"// \", header, \"\\n\")\n  text_instance &lt;- \"\"\n  text_ref &lt;- paste0(\"\\n\", \"// ref \", header, \"\\n\")\n  id_count &lt;- 1\n  type &lt;- \"structure:Part\"\n  \n  ref_instance &lt;- paste0(\"assembly:\",df_in$hasAssembly[1])\n\n  text_ref &lt;- paste0(text_ref,\n                 \"  ref instance \", ref_instance, \" [\",\"\\n\"\n                 )\n  \n  for (i in 1:nrow(df_in)){\n    for (j in 1:df_in$num[i]) {\n      id &lt;- paste0(index, \".\", formatC(id_count, width = 3, flag=\"0\"))\n      id_count &lt;- id_count + 1\n      instancekey &lt;- paste0(df_in$instancename[i], instancenameindex, \"-\", j)\n      text_instance &lt;- paste0(text_instance,\n                     \"  instance \", instancekey, \" : \", type, \" [\",\"\\n\",\n                     \"      base:hasIdentifier \\\"\", id,\"\\\"\\n\",\n                     \"      base:hasCanonicalName \\\"\",df_in$name[i],\"-\",j,\"\\\"\\n\",\n                     \"      base:hasShortName \\\"\",df_in$name[i],\"-\",j,\"\\\"\\n\",\n                     \"      structure:hasPartsNumber \\\"\",df_in$partsnumber[i],\"\\\"\\n\",\n                     \"  ]\\n\"\n                     )\n      text_ref &lt;- paste0(text_ref,\n               \"        ^structure:hasPart \", instancekey,\"\\n\"\n               )\n    }\n  }\n\n  text_ref &lt;- paste0(text_ref,\n                     \"  ]\\n\\n\"\n                     )\n\n  text &lt;- paste0(text, text_instance, text_ref)\n    \n  return(text)\n}\n\nref instance assembly:body-assembly [\n    ^structure:hasPart 2-hole-flat-beam-2\n]\n\n\n6.2.5 Output OML FILE\n\n#outputdir &lt;- \"~/Workspaces/gitlab/OSR_local/open-source-rover/src/oml/opencaesar.io/open-source-rover/description/assembly/\"\n#outputdir &lt;-\"./open-source-rover/src/oml/opencaesar.io/open-source-rover/description/assembly/\"\n# outputdir &lt;-\"./\"\noutputfile &lt;- paste0(outputdir, \"parts.oml\")"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_parts.html#generate-framework-of-parts.oml",
    "href": "chapters/02_assembly_parts/create_descriptions_parts.html#generate-framework-of-parts.oml",
    "title": "6  Create Parts Description",
    "section": "6.3 Generate framework of parts.oml",
    "text": "6.3 Generate framework of parts.oml\n\nomldescriptions &lt;-\n\"description &lt;http://opencaesar.io/open-source-rover/description/assembly/parts#&gt; as parts {\n\n  uses &lt;http://imce.jpl.nasa.gov/foundation/base#&gt; as base\n  uses &lt;http://opencaesar.io/open-source-rover/vocabulary/structure#&gt; as ^structure\n  extends &lt;http://opencaesar.io/open-source-rover/description/assembly/assembly#&gt; as assembly\n\n\""
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_parts.html#for-body",
    "href": "chapters/02_assembly_parts/create_descriptions_parts.html#for-body",
    "title": "6  Create Parts Description",
    "section": "6.4 For Body",
    "text": "6.4 For Body\n\nkey &lt;- 1\ntargetassembly &lt;- df_instance_assembly$instancename[key]\ndf &lt;- df_parts_list %&gt;% \n  filter(assembly==\"body\") %&gt;%\n  mutate(name = `short name`) %&gt;%\n  mutate(hasAssembly = df_instance_assembly$instancename[1]) %&gt;%\n  mutate(num = as.integer(`number req in assy`)) %&gt;%\n  mutate(partsnumber = `part number`) %&gt;%\n  select(name,hasAssembly,num,partsnumber) %&gt;%\n  mutate(instancename = c(\n    \"120mm-open-gorail\",\n    \"2hole-uchannel\",\n    \"32mm-bearing\",\n    \"32mm-6mm-spacer-2-pack\",\n    \"29-hole-beam\",\n    \"41-hole-beam\",\n    \"12-hole-beam\",\n    \"41-hole-ubeam\",\n    \"7-hole-flat-beam-2pack\",\n    \"dual-block-mount\",\n    \"90deg-threaded-gusset-4pack\",\n    \"50mm-threaded-rod\",\n    \"ball-linkage-2pack\",\n    \"idler-bearing-hub\",\n    \"plastic-hinges\",\n    \"8mm-standoffs\",\n    \"22mm-standoffs\",\n    \"plastic-spacer\",\n    \"3-5-grid-plate\",\n    \"2-hole-flat-beam\")\n  )\n\n\nheader &lt;- c(\"Part - Body\")\npart_instance &lt;- generatePartDescriptions(df, header, instancenameindex=\"\", index=\"P0\")\nomldescriptions &lt;- paste0(omldescriptions, part_instance,\"\\n\")"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_parts.html#for-drive-wheel-assembly-1",
    "href": "chapters/02_assembly_parts/create_descriptions_parts.html#for-drive-wheel-assembly-1",
    "title": "6  Create Parts Description",
    "section": "6.5 For drive-wheel-assembly-1",
    "text": "6.5 For drive-wheel-assembly-1\n\nkey &lt;- 2\ntargetassembly &lt;- df_instance_assembly$instancename[key]\ndf &lt;- df_parts_list %&gt;% \n  filter(assembly==\"drive wheel\") %&gt;%\n  mutate(name = `short name`) %&gt;%\n  mutate(hasAssembly = df_instance_assembly$instancename[key]) %&gt;%\n  mutate(num = as.integer(`number req in assy`)) %&gt;%\n  mutate(partsnumber = `part number`) %&gt;%\n  select(name,hasAssembly,num,partsnumber) %&gt;%\n  mutate(instancename = c(\n    \"wheel\",\n    \"clamping-mount\",\n    \"motor\",\n    \"rex-bore-hub\",\n    \"2-hole-u-channel\")\n  )\nheader &lt;- c(\"Part - drive-wheel-assembly-1\")\npart_instance &lt;- generatePartDescriptions(df, header, instancenameindex=\"-1\", index=\"P1\")\nomldescriptions &lt;- paste0(omldescriptions, part_instance,\"\\n\")"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_parts.html#for-drive-wheel-assembly-2",
    "href": "chapters/02_assembly_parts/create_descriptions_parts.html#for-drive-wheel-assembly-2",
    "title": "6  Create Parts Description",
    "section": "6.6 For drive-wheel-assembly-2",
    "text": "6.6 For drive-wheel-assembly-2\n\nkey &lt;- 3\ntargetassembly &lt;- df_instance_assembly$instancename[key]\ndf &lt;- df_parts_list %&gt;% \n  filter(assembly==\"drive wheel\") %&gt;%\n  mutate(name = `short name`) %&gt;%\n  mutate(hasAssembly = df_instance_assembly$instancename[key]) %&gt;%\n  mutate(num = as.integer(`number req in assy`)) %&gt;%\n  mutate(partsnumber = `part number`) %&gt;%\n  select(name,hasAssembly,num,partsnumber) %&gt;%\n  mutate(instancename = c(\n    \"wheel\",\n    \"clamping-mount\",\n    \"motor\",\n    \"rex-bore-hub\",\n    \"2-hole-u-channel\")\n  )\nheader &lt;- c(\"Part - drive-wheel-assembly-2\")\npart_instance &lt;- generatePartDescriptions(df, header, instancenameindex=\"-2\", index=\"P2\")\nomldescriptions &lt;- paste0(omldescriptions, part_instance,\"\\n\")"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_parts.html#for-corner-wheel-assembly-1234",
    "href": "chapters/02_assembly_parts/create_descriptions_parts.html#for-corner-wheel-assembly-1234",
    "title": "6  Create Parts Description",
    "section": "6.7 For corner-wheel-assembly-1/2/3/4",
    "text": "6.7 For corner-wheel-assembly-1/2/3/4\n\nkey &lt;- 4\nfor(i in 1:4){\n  targetassembly &lt;- df_instance_assembly$instancename[key]\n  df &lt;- df_parts_list %&gt;% \n    filter(assembly %in% c(\"drive wheel\", \"corner\")) %&gt;%\n    mutate(name = `short name`) %&gt;%\n    mutate(hasAssembly = df_instance_assembly$instancename[key]) %&gt;%\n    mutate(num = as.integer(`number req in assy`)) %&gt;%\n    mutate(partsnumber = `part number`) %&gt;%\n    select(name,hasAssembly,num,partsnumber) %&gt;%\n    mutate(instancename = c(\n      \"wheel\",\n      \"clamping-mount\",\n      \"motor\",\n      \"rex-bore-hub\",\n      \"2-hole-u-channel\",\n      \"144mm-gorail\",\n      \"4-hole-u-channel\")\n    )\n  header &lt;- c(paste0(\"Part - \", targetassembly))\n  part_instance &lt;- generatePartDescriptions(df, header, instancenameindex=paste0(\"-\", 2+i), index=paste0(\"P\",2+i))\n  omldescriptions &lt;- paste0(omldescriptions, part_instance,\"\\n\")\n  key &lt;- key + 1\n}"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_parts.html#for-rocker-bogie-suspension-assembly-12",
    "href": "chapters/02_assembly_parts/create_descriptions_parts.html#for-rocker-bogie-suspension-assembly-12",
    "title": "6  Create Parts Description",
    "section": "6.8 For rocker-bogie-suspension-assembly-1/2",
    "text": "6.8 For rocker-bogie-suspension-assembly-1/2\n\nkey &lt;- 8\nfor(i in 1:2){\n  targetassembly &lt;- df_instance_assembly$instancename[key]\n  df &lt;- df_parts_list %&gt;% \n    filter(assembly==\"rocker bogie\") %&gt;%\n    mutate(name = `short name`) %&gt;%\n    mutate(hasAssembly = df_instance_assembly$instancename[key]) %&gt;%\n    mutate(num = as.integer(`number req in assy`)) %&gt;%\n    mutate(partsnumber = `part number`) %&gt;%\n    select(name,hasAssembly,num,partsnumber) %&gt;%\n    mutate(instancename = c(\n      \"1-hole-uchannel\",\n      \"servoblock\",\n      \"servo\",\n      \"8mm-sonic-hub\",\n      \"flanged-bearing-2pack\",\n      \"joint-pattern-spacer\",\n      \"joint-8mm-shaft\",\n      \"joint-3hole-flat-beam-2pack\",\n      \"joint-pattern-mount\",\n      \"steel-flat-bracket\",\n      \"3-5-grid-plate\",\n      \"angle-bracket\",\n      \"96mm-open-gorail\",\n      \"288mm-open-goRail\",\n      \"45deg-bracket\",\n      \"90deg-steel-bracket-2pack\",\n      \"control-arm\",\n      \"8mm-id-spacer-6mm-length\",\n      \"8mm-id-spacer-4mm-length\")\n    )\n  \n  # if number of req is 0.5, we create one part instance.\n  df &lt;- df %&gt;%\n    mutate_at(vars(num), ~ ifelse(. == 0, 1, .))\n\n  \n  header &lt;- c(paste0(\"Part - \", targetassembly))\n  part_instance &lt;- generatePartDescriptions(df, header, instancenameindex=paste0(\"-\", 7+i), index=paste0(\"P\",7+i))\n  omldescriptions &lt;- paste0(omldescriptions, part_instance,\"\\n\")\n  key &lt;- key + 1\n}"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_parts.html#for-mechanical-harness",
    "href": "chapters/02_assembly_parts/create_descriptions_parts.html#for-mechanical-harness",
    "title": "6  Create Parts Description",
    "section": "6.9 For mechanical-harness",
    "text": "6.9 For mechanical-harness\n\ninstancenametext &lt;- c(\n\"hurricane-nuts\",\n\"wire-grommets\",\n\"M4-washers\",\n\"M4-uts\",\n\"M4-locknuts\",\n\"M4-6-button-screws\",\n\"M4-10-button-screws\",\n\"M4-16-button-screws\",\n\"M4-8-socket-screws\",\n\"M4-10-socket-screws\",\n\"M4-12-socket-screws\",\n\"M4-16-socket-screws\",\n\"M4-20-socket-screws\"\n)\n\n  key &lt;- 10\n  targetassembly &lt;- df_instance_assembly$instancename[key]\n  df &lt;- df_parts_list %&gt;% \n    filter(assembly==\"general\") %&gt;%\n    mutate(name = `short name`) %&gt;%\n    mutate(hasAssembly = df_instance_assembly$instancename[key]) %&gt;%\n    mutate(num = as.integer(`number req in assy`)) %&gt;%\n    mutate(partsnumber = `part number`) %&gt;%\n    select(name,hasAssembly,num,partsnumber) %&gt;%\n    mutate(instancename = instancenametext)\n  header &lt;- c(paste0(\"Part - \", targetassembly))\n  part_instance &lt;- generatePartDescriptions(df, header, instancenameindex=paste0(\"-\", 10), index=paste0(\"P\",10))\n  omldescriptions &lt;- paste0(omldescriptions, part_instance,\"\\n\")"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_parts.html#generate-oml-file",
    "href": "chapters/02_assembly_parts/create_descriptions_parts.html#generate-oml-file",
    "title": "6  Create Parts Description",
    "section": "6.10 Generate OML File",
    "text": "6.10 Generate OML File\n\nomldescriptions &lt;- paste0(omldescriptions,\"\\n}\\n\")\ncat(file=outputfile, omldescriptions)"
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_parts.html#validate-model",
    "href": "chapters/02_assembly_parts/create_descriptions_parts.html#validate-model",
    "title": "6  Create Parts Description",
    "section": "6.11 Validate Model",
    "text": "6.11 Validate Model\nBefore we check the model, add below codes to the description bundle.\n\n    includes &lt;http://opencaesar.io/open-source-rover/description/assembly/parts#&gt;\n\n\noml_repository &lt;- omlrepo\nomlhashiR::oml_refresh()\n\n[1] \"kill success for pid=43858\"\n\nomlhashiR::oml_stop_Daemon(oml_repository)\n\n[1] \"No Gradle daemons are running.\"\n\nomlhashiR::oml_build(oml_repository)\n\n [1] \"Starting a Gradle Daemon, 6 stopped Daemons could not be reused, use --status for details\"\n [2] \"&gt; Task :omlZip\"                                                                           \n [3] \"&gt; Task :assemble\"                                                                         \n [4] \"&gt; Task :downloadDependencies UP-TO-DATE\"                                                  \n [5] \"&gt; Task :omlToOwl\"                                                                         \n [6] \"&gt; Task :owlReason\"                                                                        \n [7] \"&gt; Task :check\"                                                                            \n [8] \"&gt; Task :build\"                                                                            \n [9] \"\"                                                                                         \n[10] \"BUILD SUCCESSFUL in 12s\"                                                                  \n[11] \"4 actionable tasks: 3 executed, 1 up-to-date\"                                             \n\nomlhashiR::oml_owlLoad(oml_repository)\n\n [1] \"&gt; Task :downloadDependencies UP-TO-DATE\"        \n [2] \"&gt; Task :omlToOwl UP-TO-DATE\"                    \n [3] \"&gt; Task :owlReason UP-TO-DATE\"                   \n [4] \"\"                                               \n [5] \"&gt; Task :startFuseki\"                            \n [6] \"Fuseki server is already running with pid=43879\"\n [7] \"\"                                               \n [8] \"&gt; Task :owlLoad\"                                \n [9] \"\"                                               \n[10] \"BUILD SUCCESSFUL in 5s\"                         \n[11] \"5 actionable tasks: 2 executed, 3 up-to-date\""
  },
  {
    "objectID": "chapters/02_assembly_parts/create_descriptions_parts.html#query",
    "href": "chapters/02_assembly_parts/create_descriptions_parts.html#query",
    "title": "6  Create Parts Description",
    "section": "6.12 Query",
    "text": "6.12 Query\n\nlibrary(tansakusuR)\nendpoint_url &lt;- \"http://localhost:3030/open-source-rover/sparql\"\n\n\nquery_string &lt;-'\nPREFIX base:        &lt;http://imce.jpl.nasa.gov/foundation/base#&gt;\nPREFIX mission:     &lt;http://imce.jpl.nasa.gov/foundation/mission#&gt;\nPREFIX structure:   &lt;http://opencaesar.io/open-source-rover/vocabulary/structure#&gt;\nPREFIX rdfs:        &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\n\nSELECT DISTINCT ?c1_localname ?c1_name ?c1_type ?c2_localname ?c2_name\nWHERE {\n    ?c1 a mission:Component ;\n      base:hasCanonicalName ?c1_name .\n    OPTIONAL{\n        ?c1 base:isContainedIn ?c2 .\n        OPTIONAL{\n            ?c2 base:hasCanonicalName ?c2_name .\n        }\n    }\n    # Extract the local name\n    BIND(STRAFTER(STR(?c1), \"#\") AS ?c1_localname) .\n    BIND(STRAFTER(STR(?c2), \"#\") AS ?c2_localname) .\n\n    OPTIONAL {\n        ?c1 a structure:System ;\n            BIND(\"structure:System\"  AS ?c1_type) .\n    }    \n    OPTIONAL {\n        ?c1 a structure:Subsystem ;\n            BIND(\"structure:Subsystem\"  AS ?c1_type) .\n    } \n    OPTIONAL {\n        ?c1 a structure:Assembly ;\n            BIND(\"structure:Assembly\"  AS ?c1_type) .\n    } \n    OPTIONAL {\n        ?c1 a structure:Part ;\n            BIND(\"structure:Part\"  AS ?c1_type) .\n    } \n}\nORDER BY ?c1_localname \n'\ndf_query &lt;- tansakusuR::send_query(endpoint_url,query_string)\ndatatable(df_query, options = list(pageLength = 20))\n\n\n\n\n\n\n\ndf2 &lt;- df_query %&gt;%\n  arrange(desc(c2_name))\n\n\nplotCollapsibleTreeFromDataframe(df2, palette=\"BluYl\", parent=\"c2_name\", child=\"c1_name\",type=\"c1_type\")\n\n\n\n\n\n\ndf2&lt;- df_query %&gt;% \n  mutate(owner=c2_name) %&gt;%\n  mutate(name=c1_name) %&gt;%\n  select(\"owner\",\"name\") %&gt;%\n  arrange(desc(owner)) %&gt;%  \n  slice(-n())\n\n\n\nlibrary(networkD3)\n\nnetworkD3::simpleNetwork(df2)\n\n\n\n\nlibrary(data.tree)\nnd3 &lt;- ToListExplicit(FromDataFrameNetwork(df2), unname = T)\n\nnetworkD3::diagonalNetwork(List = nd3, fontSize = 10, opacity = 0.9)\n\n\n\n\nnetworkD3::radialNetwork(nd3, nodeColour=\"seagreen\")"
  },
  {
    "objectID": "chapters/03_timeline_analysis/usecase_timeline.html#generate-timeline-file-for-modelica",
    "href": "chapters/03_timeline_analysis/usecase_timeline.html#generate-timeline-file-for-modelica",
    "title": "7  Timeline Analysis",
    "section": "7.1 Generate Timeline file for modelica",
    "text": "7.1 Generate Timeline file for modelica\n\ndf_timeline &lt;- df %&gt;% \n  filter(statevariable == \"roverVelocity\") %&gt;%\n  select(time, statevariable, value)\n  \noutputfile &lt;- \"~/Workspaces/openmodelica-docker-start/om-develop/timeline.txt\"\n\ntxt &lt;- \"#1\\n\"\ntxt &lt;- paste0(txt, \"double Tab1(\",nrow(df_timeline),\",2)\\n\")\nfor( i in 1:nrow(df_timeline)){\n  txt &lt;- paste0(txt, df_timeline$time[i],\" \",df_timeline$value[i],\"\\n\")\n}\ncat(file = outputfile, txt)"
  },
  {
    "objectID": "chapters/03_timeline_analysis/usecase_timeline.html#execute-modelica",
    "href": "chapters/03_timeline_analysis/usecase_timeline.html#execute-modelica",
    "title": "7  Timeline Analysis",
    "section": "7.2 Execute Modelica",
    "text": "7.2 Execute Modelica\n\n## need some code"
  },
  {
    "objectID": "chapters/04_massrollup/massrollup.html#summary",
    "href": "chapters/04_massrollup/massrollup.html#summary",
    "title": "8  Mass Roll Up Analysis",
    "section": "8.1 Summary",
    "text": "8.1 Summary"
  },
  {
    "objectID": "chapters/04_massrollup/massrollup.html#methodology",
    "href": "chapters/04_massrollup/massrollup.html#methodology",
    "title": "8  Mass Roll Up Analysis",
    "section": "8.2 Methodology",
    "text": "8.2 Methodology"
  },
  {
    "objectID": "chapters/04_massrollup/massrollup.html#business-questions",
    "href": "chapters/04_massrollup/massrollup.html#business-questions",
    "title": "8  Mass Roll Up Analysis",
    "section": "8.3 Business Questions",
    "text": "8.3 Business Questions\nWhat is total mass of OSR system?"
  },
  {
    "objectID": "chapters/04_massrollup/massrollup.html#vocabulary",
    "href": "chapters/04_massrollup/massrollup.html#vocabulary",
    "title": "8  Mass Roll Up Analysis",
    "section": "8.4 Vocabulary",
    "text": "8.4 Vocabulary"
  },
  {
    "objectID": "chapters/04_massrollup/massrollup.html#descriptions",
    "href": "chapters/04_massrollup/massrollup.html#descriptions",
    "title": "8  Mass Roll Up Analysis",
    "section": "8.5 Descriptions",
    "text": "8.5 Descriptions\n\n8.5.1 Modeling Descriptions Mass Property\nDefine mass property target\n\nsource(\"../../osr_common.R\")\n\n\nlibrary(omlhashiR)\n# oml_repository &lt;- \"../open-source-rover/\"\noml_repository &lt;- omlrepo\nomlhashiR::oml_refresh()\n\n[1] \"kill success for pid=43879\"\n\nomlhashiR::oml_stop_Daemon(oml_repository)\n\n[1] \"Stopping Daemon(s)\" \"1 Daemon stopped\"  \n\nomlhashiR::oml_build(oml_repository)\n\n [1] \"Starting a Gradle Daemon, 7 stopped Daemons could not be reused, use --status for details\"\n [2] \"&gt; Task :omlZip UP-TO-DATE\"                                                                \n [3] \"&gt; Task :assemble UP-TO-DATE\"                                                              \n [4] \"&gt; Task :downloadDependencies UP-TO-DATE\"                                                  \n [5] \"&gt; Task :omlToOwl UP-TO-DATE\"                                                              \n [6] \"&gt; Task :owlReason UP-TO-DATE\"                                                             \n [7] \"&gt; Task :check UP-TO-DATE\"                                                                 \n [8] \"&gt; Task :build UP-TO-DATE\"                                                                 \n [9] \"\"                                                                                         \n[10] \"BUILD SUCCESSFUL in 5s\"                                                                   \n[11] \"4 actionable tasks: 4 up-to-date\"                                                         \n\nomlhashiR::oml_owlLoad(oml_repository)\n\n [1] \"&gt; Task :downloadDependencies UP-TO-DATE\"                                                      \n [2] \"&gt; Task :omlToOwl UP-TO-DATE\"                                                                  \n [3] \"&gt; Task :owlReason UP-TO-DATE\"                                                                 \n [4] \"\"                                                                                             \n [5] \"&gt; Task :startFuseki\"                                                                          \n [6] \"Fuseki server has now successfully started with pid=44503, listening on http://localhost:3030\"\n [7] \"\"                                                                                             \n [8] \"&gt; Task :owlLoad\"                                                                              \n [9] \"\"                                                                                             \n[10] \"BUILD SUCCESSFUL in 8s\"                                                                       \n[11] \"5 actionable tasks: 2 executed, 3 up-to-date\"                                                 \n\n\n\n\n8.5.2 Set endpoint_url\n\nendpoint_url &lt;- \"http://localhost:3030/open-source-rover/sparql\"\n\n\nlibrary(tansakusuR)\nrepo &lt;- \"../../../src/vision/sparql/\"\nfile &lt;- \"component_filtered_withmass.sparql\"\nfilepath &lt;- paste0(repo,file)\n\nshow_query(filepath)\n\nPREFIX base:        &lt;http://imce.jpl.nasa.gov/foundation/base#&gt;\nPREFIX mission:     &lt;http://imce.jpl.nasa.gov/foundation/mission#&gt;\nPREFIX structure:   &lt;http://opencaesar.io/open-source-rover/vocabulary/structure#&gt;\nPREFIX rdfs:        &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\n\nSELECT DISTINCT ?c1_localname ?c1_id ?c1_name ?c1_type ?c2_localname ?c2_id ?c2_name\nWHERE {\n\n    VALUES ?componentType { structure:System structure:Subsystem structure:Assembly }\n\n    ?c1 a ?componentType ;\n        base:hasIdentifier ?c1_id ;\n        base:hasCanonicalName ?c1_name ;\n\n    OPTIONAL{\n        ?c1 base:isContainedIn ?c2 ;\n        OPTIONAL{\n            ?c2 base:hasIdentifier ?c2_id ;\n                base:hasCanonicalName ?c2_name .\n        }\n    }\n    # Extract the local name\n    BIND(STRAFTER(STR(?c1), \"#\") AS ?c1_localname) .\n    BIND(STRAFTER(STR(?c2), \"#\") AS ?c2_localname) .\n\n    OPTIONAL {\n        ?c1 a structure:System ;\n            BIND(\"System\"  AS ?c1_type) .\n    }\n    OPTIONAL {\n        ?c1 a structure:Subsystem ;\n            BIND(\"Subsystem\"  AS ?c1_type) .\n    }\n    OPTIONAL {\n        ?c1 a structure:Assembly ;\n            BIND(\"Assembly\"  AS ?c1_type) .\n    }\n}\nORDER BY ?c1_id\n\ndf &lt;- send_query_from_file(endpoint_url, filepath)\ndatatable(df, options = list(pageLength = -1))"
  },
  {
    "objectID": "chapters/04_massrollup/massrollup.html#analysis",
    "href": "chapters/04_massrollup/massrollup.html#analysis",
    "title": "8  Mass Roll Up Analysis",
    "section": "8.6 Analysis",
    "text": "8.6 Analysis"
  },
  {
    "objectID": "chapters/04_massrollup/massrollup.html#visualize",
    "href": "chapters/04_massrollup/massrollup.html#visualize",
    "title": "8  Mass Roll Up Analysis",
    "section": "8.7 Visualize",
    "text": "8.7 Visualize"
  },
  {
    "objectID": "sparqlwithr.html#run-gradle-task-from-r",
    "href": "sparqlwithr.html#run-gradle-task-from-r",
    "title": "9  OML + Gradle + SPARQL + R",
    "section": "9.1 Run Gradle Task from R",
    "text": "9.1 Run Gradle Task from R\nWe have three options to run gradle tasks.\n\nRun task from your terminal.\nRun task using a system() function with R\nRun Task using a package omlhashiR\n\n\n9.1.1 Run task from your terminal\n\n\n\nFigure 9.2: Run from terminal\n\n\n\ncd ../\n./gradlew owlLoad\n\n&gt; Task :downloadDependencies UP-TO-DATE\n&gt; Task :omlToOwl UP-TO-DATE\n&gt; Task :owlReason UP-TO-DATE\n&gt; Task :startFuseki UP-TO-DATE\n&gt; Task :owlLoad UP-TO-DATE\n\nBUILD SUCCESSFUL in 1s\n5 actionable tasks: 5 up-to-date\n\n\n\n\n9.1.2 Using system command from R\n\noml_repo &lt;- \"../\"\nsprintf(\"cd %s\\n ./gradlew owlLoad\", oml_repo) |&gt;\n  system(intern=TRUE)\n\n[1] \"&gt; Task :downloadDependencies UP-TO-DATE\"\n[2] \"&gt; Task :omlToOwl UP-TO-DATE\"            \n[3] \"&gt; Task :owlReason UP-TO-DATE\"           \n[4] \"&gt; Task :startFuseki UP-TO-DATE\"         \n[5] \"&gt; Task :owlLoad UP-TO-DATE\"             \n[6] \"\"                                       \n[7] \"BUILD SUCCESSFUL in 1s\"                 \n[8] \"5 actionable tasks: 5 up-to-date\"       \n\n\n\n\n9.1.3 Using a package omlhashiR\n\nlibrary(omlhashiR)\n\noml_repository &lt;- \"../\"\nomlhashiR::oml_build(oml_repository)\n\n [1] \"&gt; Task :omlZip UP-TO-DATE\"              \n [2] \"&gt; Task :assemble UP-TO-DATE\"            \n [3] \"&gt; Task :downloadDependencies UP-TO-DATE\"\n [4] \"&gt; Task :omlToOwl UP-TO-DATE\"            \n [5] \"&gt; Task :owlReason UP-TO-DATE\"           \n [6] \"&gt; Task :check UP-TO-DATE\"               \n [7] \"&gt; Task :build UP-TO-DATE\"               \n [8] \"\"                                       \n [9] \"BUILD SUCCESSFUL in 962ms\"              \n[10] \"4 actionable tasks: 4 up-to-date\"       \n\nomlhashiR::oml_owlLoad(oml_repository)\n\n[1] \"&gt; Task :downloadDependencies UP-TO-DATE\"\n[2] \"&gt; Task :omlToOwl UP-TO-DATE\"            \n[3] \"&gt; Task :owlReason UP-TO-DATE\"           \n[4] \"&gt; Task :startFuseki UP-TO-DATE\"         \n[5] \"&gt; Task :owlLoad UP-TO-DATE\"             \n[6] \"\"                                       \n[7] \"BUILD SUCCESSFUL in 1s\"                 \n[8] \"5 actionable tasks: 5 up-to-date\""
  },
  {
    "objectID": "sparqlwithr.html#send-sparql-query-from-r",
    "href": "sparqlwithr.html#send-sparql-query-from-r",
    "title": "9  OML + Gradle + SPARQL + R",
    "section": "9.2 Send SPARQL query from R",
    "text": "9.2 Send SPARQL query from R\n\n9.2.1 Using package “tansakusuR”\n\n# For the first time \nlibrary(devtools)\ninstall_github(\"UTNAK/tansakusuR\")\n\nlibrary(tansakusuR)\n\n\n\n9.2.2 Set endpoint_url\n\nendpoint_url &lt;- \"http://localhost:3030/open-source-rover/sparql\"\n\n\n\n9.2.3 Set SPARQL Query\n\nquery_string &lt;-'\nPREFIX base:        &lt;http://imce.jpl.nasa.gov/foundation/base#&gt;\nPREFIX mission:     &lt;http://imce.jpl.nasa.gov/foundation/mission#&gt;\nPREFIX structure:   &lt;http://opencaesar.io/open-source-rover/vocabulary/structure#&gt;\nPREFIX scenario:   &lt;http://opencaesar.io/open-source-rover/vocabulary/scenario#&gt;\nPREFIX rdfs:        &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\nPREFIX oml:           &lt;http://opencaesar.io/oml#&gt;\n\nSELECT DISTINCT ?manipulate ?f2_id ?f2_cname ?task ?time ?statevariable ?value ?f3_id\nWHERE {\n    ?m a scenario:Manipulates;\n        oml:hasSource ?t ;\n        oml:hasTarget ?s ;\n        scenario:setStateValue ?value ;\n        OPTIONAL{\n            ?t scenario:hasPlannedStartTime ?time .\n            ?t base:hasIdentifier ?f2_id .\n            ?t base:hasCanonicalName ?f2_cname .\n            OPTIONAL{\n            ?t mission:invokes ?f3 .\n            ?f3 base:hasIdentifier ?f3_id .\n        }\n        \n        }\n\n    # Extract the local name\n    BIND(STRAFTER(STR(?m), \"#\") AS ?manipulate) .\n    BIND(STRAFTER(STR(?t), \"#\") AS ?task) .\n    BIND(STRAFTER(STR(?s), \"#\") AS ?statevariable) .\n} \nORDER BY ?m\n'\n\n\n\n9.2.4 Send Query and show results\n\ndata_frame &lt;- send_query(endpoint_url,query_string)\n\nlibrary(DT)\ndatatable(data_frame)\n\n\n\n\n\n\n\n\n9.2.5 Send Query with a .sparql file.\n\nlibrary(tansakusuR)\nrepo &lt;- \"../src/vision/sparql/\"\nfile &lt;- \"component_with_id.sparql\"\nfilepath &lt;- paste0(repo,file)\n\nshow_query(filepath)\n\nPREFIX base:        &lt;http://imce.jpl.nasa.gov/foundation/base#&gt;\nPREFIX mission:     &lt;http://imce.jpl.nasa.gov/foundation/mission#&gt;\nPREFIX structure:   &lt;http://opencaesar.io/open-source-rover/vocabulary/structure#&gt;\nPREFIX rdfs:        &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\n\nSELECT DISTINCT ?c1_localname ?c2_localname ?c2_id ?c2_cname\nWHERE {\n    ?c1 a structure:System ;\n    OPTIONAL{\n        ?c1 structure:hasSubsystem ?c2 .\n        OPTIONAL{\n            ?c2 base:hasIdentifier ?c2_id .\n            ?c2 base:hasCanonicalName ?c2_cname .\n        }\n    }\n    # Extract the local name\n    BIND(STRAFTER(STR(?c1), \"#\") AS ?c1_localname) .\n    BIND(STRAFTER(STR(?c2), \"#\") AS ?c2_localname) .\n\n} \nORDER BY ?c1_localname \n\ndf &lt;- send_query_from_file(endpoint_url, filepath)\ndatatable(df)\n\n\n\n\n\n\nHere is another example.\n\nlibrary(tansakusuR)\nrepo &lt;- \"../src/vision/sparql/\"\nfile &lt;- \"query_scenario_move_v2.sparql\"\nfilepath &lt;- paste0(repo,file)\n\nshow_query(filepath)\n\nPREFIX base:        &lt;http://imce.jpl.nasa.gov/foundation/base#&gt;\nPREFIX mission:     &lt;http://imce.jpl.nasa.gov/foundation/mission#&gt;\nPREFIX structure:   &lt;http://opencaesar.io/open-source-rover/vocabulary/structure#&gt;\nPREFIX scenario:   &lt;http://opencaesar.io/open-source-rover/vocabulary/scenario#&gt;\nPREFIX rdfs:        &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\nPREFIX oml:           &lt;http://opencaesar.io/oml#&gt;\n\nSELECT DISTINCT ?manipulate ?f2_id ?f2_cname ?task ?time ?statevariable ?value ?f3_id\nWHERE {\n    ?m a scenario:Manipulates;\n        oml:hasSource ?t ;\n        oml:hasTarget ?s ;\n        scenario:setStateValue ?value ;\n        OPTIONAL{\n            ?t scenario:hasPlannedStartTime ?time .\n            ?t base:hasIdentifier ?f2_id .\n            ?t base:hasCanonicalName ?f2_cname .\n            OPTIONAL{\n            ?t mission:invokes ?f3 .\n            ?f3 base:hasIdentifier ?f3_id .\n        }\n        \n        }\n\n    # Extract the local name\n    BIND(STRAFTER(STR(?m), \"#\") AS ?manipulate) .\n    BIND(STRAFTER(STR(?t), \"#\") AS ?task) .\n    BIND(STRAFTER(STR(?s), \"#\") AS ?statevariable) .\n} \nORDER BY ?m\n\ndf &lt;- send_query_from_file(endpoint_url, filepath)\ndatatable(df)"
  }
]